{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_dir = os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_ratings = pd.read_csv('ratings.txt', header=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'22_lo.csv'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_dir[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[22  5  8]]\n",
      "[[30  1  8]]\n",
      "[[9 1 7]]\n",
      "[[17  1  9]]\n",
      "[[21  1  6]]\n",
      "[[33  1  5]]\n",
      "[[15  1  6]]\n",
      "[[7 1 5]]\n",
      "[[19  1  5]]\n",
      "[[31  1  6]]\n",
      "[[23  1  5]]\n",
      "[[40  1  5]]\n",
      "[[16  2  9]]\n",
      "[[4 2 5]]\n",
      "[[32  2  7]]\n",
      "[[43  1  7]]\n",
      "[[20  2  8]]\n",
      "[[27  1  4]]\n",
      "[[44  3  8]]\n",
      "[[39  3  8]]\n",
      "[[48  1  7]]\n",
      "[[35  2  4]]\n",
      "[[3 1 5]]\n",
      "[[11  1  5]]\n",
      "[[28  2  7]]\n",
      "[[34  3  9]]\n",
      "[[26  1  8]]\n",
      "[[38  1  5]]\n",
      "[[10  1  6]]\n",
      "[[29  3  6]]\n",
      "[[37  3  8]]\n",
      "[[46  2  7]]\n",
      "[[25  2  4]]\n",
      "[[13  2  7]]\n",
      "[[1 2 8]]\n",
      "[[20  2  8]]\n",
      "[[43  1  7]]\n",
      "[[32  2  7]]\n",
      "[[4 2 5]]\n",
      "[[16  2  9]]\n",
      "[[8 3 7]]\n",
      "[[15  1  6]]\n",
      "[[17  1  9]]\n",
      "[[9 1 7]]\n",
      "[[30  1  8]]\n",
      "[[41  3  6]]\n",
      "[[22  5  8]]\n",
      "[[14  2  7]]\n",
      "[[18  4  7]]\n",
      "[[6 4 7]]\n",
      "[[1 2 8]]\n",
      "[[13  2  7]]\n",
      "[[25  2  4]]\n",
      "[[46  2  7]]\n",
      "[[37  3  8]]\n",
      "[[2 1 5]]\n",
      "[[10  1  6]]\n",
      "[[38  1  5]]\n",
      "[[45  1  8]]\n",
      "[[26  1  8]]\n",
      "[[34  3  9]]\n",
      "[[12  1  6]]\n",
      "[[36  2  8]]\n",
      "[[28  2  7]]\n",
      "[[47  1  8]]\n",
      "[[11  1  5]]\n",
      "[[3 1 5]]\n",
      "[[48  1  7]]\n",
      "[[44  3  8]]\n"
     ]
    }
   ],
   "source": [
    "#dataframe of brainwave features\n",
    "eeg_data = []\n",
    "\n",
    "for ftemp in current_dir:\n",
    "    if ftemp[-3:] == 'csv':\n",
    "        tgt_partic = int(ftemp[0:2])\n",
    "        #print(tgt_partic)\n",
    "        temprat = temp_ratings[temp_ratings[0] == tgt_partic]\n",
    "       # print(temprat)\n",
    "        if len(temprat)==0:\n",
    "            tgt_partic_rat = np.array([[0,0,0]])\n",
    "        else:\n",
    "            tgt_partic_rat = temprat.values\n",
    "            print(tgt_partic_rat)\n",
    "            \n",
    "        \n",
    "        dftemp = pd.read_csv(ftemp, header='infer')\n",
    "        dftemp['subj'] = tgt_partic\n",
    "        \n",
    "        dftemp['hilo'] = ftemp[3:5]\n",
    "        if ftemp[3:5] == 'hi':\n",
    "            dftemp['subjective_rating'] = tgt_partic_rat[0][2]\n",
    "            #print(tgt_partic_rat[0][2])\n",
    "            #print(dftemp)\n",
    "        else:\n",
    "            dftemp['subjective_rating'] = tgt_partic_rat[0][1]\n",
    "        eeg_data.append(dftemp)\n",
    "        \n",
    "eeg_data = pd.concat(eeg_data)\n",
    "#eeg_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>AF3_Delta</th>\n",
       "      <th>AF3_Theta</th>\n",
       "      <th>AF3_Alpha</th>\n",
       "      <th>AF3_Beta</th>\n",
       "      <th>AF3_Gamma</th>\n",
       "      <th>F7_Delta</th>\n",
       "      <th>F7_Theta</th>\n",
       "      <th>F7_Alpha</th>\n",
       "      <th>F7_Beta</th>\n",
       "      <th>...</th>\n",
       "      <th>F8_Beta</th>\n",
       "      <th>F8_Gamma</th>\n",
       "      <th>AF4_Delta</th>\n",
       "      <th>AF4_Theta</th>\n",
       "      <th>AF4_Alpha</th>\n",
       "      <th>AF4_Beta</th>\n",
       "      <th>AF4_Gamma</th>\n",
       "      <th>subj</th>\n",
       "      <th>hilo</th>\n",
       "      <th>subjective_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>141066.648380</td>\n",
       "      <td>151.692854</td>\n",
       "      <td>319.007613</td>\n",
       "      <td>109.440743</td>\n",
       "      <td>48.074784</td>\n",
       "      <td>148852.650305</td>\n",
       "      <td>259.193142</td>\n",
       "      <td>376.905330</td>\n",
       "      <td>68.034017</td>\n",
       "      <td>...</td>\n",
       "      <td>134.392672</td>\n",
       "      <td>71.025734</td>\n",
       "      <td>143308.372849</td>\n",
       "      <td>270.738332</td>\n",
       "      <td>298.306886</td>\n",
       "      <td>155.541612</td>\n",
       "      <td>33.208245</td>\n",
       "      <td>22</td>\n",
       "      <td>lo</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>144658.835390</td>\n",
       "      <td>220.422728</td>\n",
       "      <td>779.900723</td>\n",
       "      <td>114.260274</td>\n",
       "      <td>23.851608</td>\n",
       "      <td>151953.865926</td>\n",
       "      <td>145.204845</td>\n",
       "      <td>677.816665</td>\n",
       "      <td>77.198758</td>\n",
       "      <td>...</td>\n",
       "      <td>357.018443</td>\n",
       "      <td>177.315036</td>\n",
       "      <td>141052.860216</td>\n",
       "      <td>470.558070</td>\n",
       "      <td>880.152078</td>\n",
       "      <td>194.737606</td>\n",
       "      <td>81.950629</td>\n",
       "      <td>22</td>\n",
       "      <td>lo</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>146071.638711</td>\n",
       "      <td>263.775598</td>\n",
       "      <td>864.127195</td>\n",
       "      <td>118.460166</td>\n",
       "      <td>33.834207</td>\n",
       "      <td>153315.389500</td>\n",
       "      <td>239.427556</td>\n",
       "      <td>659.540641</td>\n",
       "      <td>97.702703</td>\n",
       "      <td>...</td>\n",
       "      <td>102.350771</td>\n",
       "      <td>32.440989</td>\n",
       "      <td>144716.689488</td>\n",
       "      <td>341.959544</td>\n",
       "      <td>722.640165</td>\n",
       "      <td>166.428019</td>\n",
       "      <td>63.080003</td>\n",
       "      <td>22</td>\n",
       "      <td>lo</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>138392.988935</td>\n",
       "      <td>1855.808666</td>\n",
       "      <td>1033.883250</td>\n",
       "      <td>526.549600</td>\n",
       "      <td>283.826881</td>\n",
       "      <td>137848.446681</td>\n",
       "      <td>2488.942221</td>\n",
       "      <td>1343.269461</td>\n",
       "      <td>692.792018</td>\n",
       "      <td>...</td>\n",
       "      <td>89.015625</td>\n",
       "      <td>33.482549</td>\n",
       "      <td>149041.532131</td>\n",
       "      <td>249.514158</td>\n",
       "      <td>150.569900</td>\n",
       "      <td>82.769339</td>\n",
       "      <td>37.370594</td>\n",
       "      <td>30</td>\n",
       "      <td>lo</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>139780.131901</td>\n",
       "      <td>1481.894783</td>\n",
       "      <td>933.311736</td>\n",
       "      <td>449.358233</td>\n",
       "      <td>230.436044</td>\n",
       "      <td>136577.087573</td>\n",
       "      <td>1989.044537</td>\n",
       "      <td>865.988773</td>\n",
       "      <td>458.464880</td>\n",
       "      <td>...</td>\n",
       "      <td>84.369226</td>\n",
       "      <td>26.790312</td>\n",
       "      <td>148345.030189</td>\n",
       "      <td>221.637591</td>\n",
       "      <td>146.439274</td>\n",
       "      <td>96.299765</td>\n",
       "      <td>26.084111</td>\n",
       "      <td>30</td>\n",
       "      <td>lo</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>135177.158649</td>\n",
       "      <td>1771.610858</td>\n",
       "      <td>738.047210</td>\n",
       "      <td>487.100153</td>\n",
       "      <td>238.428647</td>\n",
       "      <td>150473.861395</td>\n",
       "      <td>2288.415268</td>\n",
       "      <td>1009.569258</td>\n",
       "      <td>350.550397</td>\n",
       "      <td>...</td>\n",
       "      <td>70.974183</td>\n",
       "      <td>23.391432</td>\n",
       "      <td>148849.298481</td>\n",
       "      <td>242.963142</td>\n",
       "      <td>144.292472</td>\n",
       "      <td>67.431127</td>\n",
       "      <td>26.192315</td>\n",
       "      <td>30</td>\n",
       "      <td>lo</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>149156.507732</td>\n",
       "      <td>157.282063</td>\n",
       "      <td>262.710099</td>\n",
       "      <td>102.717641</td>\n",
       "      <td>22.022006</td>\n",
       "      <td>129927.916846</td>\n",
       "      <td>126.038866</td>\n",
       "      <td>205.987715</td>\n",
       "      <td>85.004530</td>\n",
       "      <td>...</td>\n",
       "      <td>126.648929</td>\n",
       "      <td>41.713656</td>\n",
       "      <td>137258.901569</td>\n",
       "      <td>123.482257</td>\n",
       "      <td>281.258647</td>\n",
       "      <td>107.693431</td>\n",
       "      <td>20.714531</td>\n",
       "      <td>9</td>\n",
       "      <td>hi</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>150002.529628</td>\n",
       "      <td>237.774108</td>\n",
       "      <td>321.713323</td>\n",
       "      <td>80.415566</td>\n",
       "      <td>28.279437</td>\n",
       "      <td>131403.428152</td>\n",
       "      <td>300.946113</td>\n",
       "      <td>209.155781</td>\n",
       "      <td>75.349118</td>\n",
       "      <td>...</td>\n",
       "      <td>109.151042</td>\n",
       "      <td>25.065443</td>\n",
       "      <td>137728.295472</td>\n",
       "      <td>268.835443</td>\n",
       "      <td>324.119295</td>\n",
       "      <td>99.362856</td>\n",
       "      <td>19.579199</td>\n",
       "      <td>9</td>\n",
       "      <td>hi</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>148783.654783</td>\n",
       "      <td>135.353536</td>\n",
       "      <td>129.022284</td>\n",
       "      <td>86.649525</td>\n",
       "      <td>28.150646</td>\n",
       "      <td>129168.211105</td>\n",
       "      <td>204.993767</td>\n",
       "      <td>117.542636</td>\n",
       "      <td>89.491902</td>\n",
       "      <td>...</td>\n",
       "      <td>124.298621</td>\n",
       "      <td>57.756236</td>\n",
       "      <td>137443.668968</td>\n",
       "      <td>162.936382</td>\n",
       "      <td>141.437012</td>\n",
       "      <td>89.045810</td>\n",
       "      <td>35.366350</td>\n",
       "      <td>9</td>\n",
       "      <td>hi</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>133856.148395</td>\n",
       "      <td>63.916359</td>\n",
       "      <td>39.398779</td>\n",
       "      <td>28.029808</td>\n",
       "      <td>17.134230</td>\n",
       "      <td>131942.740164</td>\n",
       "      <td>130.003757</td>\n",
       "      <td>85.235576</td>\n",
       "      <td>62.919793</td>\n",
       "      <td>...</td>\n",
       "      <td>158.800879</td>\n",
       "      <td>55.645085</td>\n",
       "      <td>151441.807687</td>\n",
       "      <td>87.715338</td>\n",
       "      <td>65.873997</td>\n",
       "      <td>52.586682</td>\n",
       "      <td>15.511551</td>\n",
       "      <td>17</td>\n",
       "      <td>hi</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>133065.327626</td>\n",
       "      <td>117.825833</td>\n",
       "      <td>101.193341</td>\n",
       "      <td>71.843714</td>\n",
       "      <td>28.053973</td>\n",
       "      <td>132576.890033</td>\n",
       "      <td>628.650130</td>\n",
       "      <td>274.007311</td>\n",
       "      <td>142.964121</td>\n",
       "      <td>...</td>\n",
       "      <td>139.009027</td>\n",
       "      <td>47.162003</td>\n",
       "      <td>150368.716780</td>\n",
       "      <td>107.440547</td>\n",
       "      <td>60.381997</td>\n",
       "      <td>73.030731</td>\n",
       "      <td>16.764780</td>\n",
       "      <td>17</td>\n",
       "      <td>hi</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>133793.957524</td>\n",
       "      <td>334.103949</td>\n",
       "      <td>112.552525</td>\n",
       "      <td>74.685869</td>\n",
       "      <td>23.958087</td>\n",
       "      <td>131828.342274</td>\n",
       "      <td>91.584585</td>\n",
       "      <td>95.963595</td>\n",
       "      <td>56.368909</td>\n",
       "      <td>...</td>\n",
       "      <td>106.414084</td>\n",
       "      <td>47.719334</td>\n",
       "      <td>150623.065118</td>\n",
       "      <td>94.379057</td>\n",
       "      <td>91.629277</td>\n",
       "      <td>46.270625</td>\n",
       "      <td>16.448099</td>\n",
       "      <td>17</td>\n",
       "      <td>hi</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>150085.057826</td>\n",
       "      <td>253.236453</td>\n",
       "      <td>206.643496</td>\n",
       "      <td>78.307118</td>\n",
       "      <td>25.319552</td>\n",
       "      <td>130205.383305</td>\n",
       "      <td>178.485754</td>\n",
       "      <td>109.380758</td>\n",
       "      <td>53.226500</td>\n",
       "      <td>...</td>\n",
       "      <td>118.493296</td>\n",
       "      <td>59.892965</td>\n",
       "      <td>138734.682866</td>\n",
       "      <td>309.466935</td>\n",
       "      <td>234.911688</td>\n",
       "      <td>93.386232</td>\n",
       "      <td>35.679778</td>\n",
       "      <td>21</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>149141.889252</td>\n",
       "      <td>238.642026</td>\n",
       "      <td>132.175146</td>\n",
       "      <td>75.030593</td>\n",
       "      <td>21.951600</td>\n",
       "      <td>130221.607991</td>\n",
       "      <td>289.616828</td>\n",
       "      <td>86.039844</td>\n",
       "      <td>56.612557</td>\n",
       "      <td>...</td>\n",
       "      <td>146.993035</td>\n",
       "      <td>68.058922</td>\n",
       "      <td>137187.408786</td>\n",
       "      <td>307.278576</td>\n",
       "      <td>165.773269</td>\n",
       "      <td>100.317090</td>\n",
       "      <td>40.393618</td>\n",
       "      <td>21</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>149253.689676</td>\n",
       "      <td>120.411030</td>\n",
       "      <td>99.346807</td>\n",
       "      <td>62.091548</td>\n",
       "      <td>25.882486</td>\n",
       "      <td>129786.368333</td>\n",
       "      <td>208.731325</td>\n",
       "      <td>108.986141</td>\n",
       "      <td>62.136960</td>\n",
       "      <td>...</td>\n",
       "      <td>90.159397</td>\n",
       "      <td>29.208711</td>\n",
       "      <td>137914.138085</td>\n",
       "      <td>280.683171</td>\n",
       "      <td>145.098596</td>\n",
       "      <td>80.053563</td>\n",
       "      <td>22.344614</td>\n",
       "      <td>21</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>149608.897407</td>\n",
       "      <td>90.087583</td>\n",
       "      <td>82.468495</td>\n",
       "      <td>66.001643</td>\n",
       "      <td>26.366445</td>\n",
       "      <td>131048.260982</td>\n",
       "      <td>218.174245</td>\n",
       "      <td>159.474565</td>\n",
       "      <td>75.150923</td>\n",
       "      <td>...</td>\n",
       "      <td>97.674918</td>\n",
       "      <td>22.519320</td>\n",
       "      <td>138282.828443</td>\n",
       "      <td>449.039390</td>\n",
       "      <td>191.672865</td>\n",
       "      <td>81.890421</td>\n",
       "      <td>40.886195</td>\n",
       "      <td>33</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>149317.861527</td>\n",
       "      <td>158.283540</td>\n",
       "      <td>103.821908</td>\n",
       "      <td>98.483453</td>\n",
       "      <td>44.093692</td>\n",
       "      <td>129482.011211</td>\n",
       "      <td>282.251001</td>\n",
       "      <td>180.214686</td>\n",
       "      <td>79.428388</td>\n",
       "      <td>...</td>\n",
       "      <td>111.412685</td>\n",
       "      <td>50.410781</td>\n",
       "      <td>138217.007734</td>\n",
       "      <td>320.043108</td>\n",
       "      <td>100.575211</td>\n",
       "      <td>114.475486</td>\n",
       "      <td>42.987479</td>\n",
       "      <td>33</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>149736.472573</td>\n",
       "      <td>429.140741</td>\n",
       "      <td>225.607398</td>\n",
       "      <td>142.573287</td>\n",
       "      <td>72.995587</td>\n",
       "      <td>135601.713550</td>\n",
       "      <td>1917.649600</td>\n",
       "      <td>385.438690</td>\n",
       "      <td>322.094477</td>\n",
       "      <td>...</td>\n",
       "      <td>136.756622</td>\n",
       "      <td>69.208714</td>\n",
       "      <td>138222.569442</td>\n",
       "      <td>289.332204</td>\n",
       "      <td>154.828303</td>\n",
       "      <td>116.664828</td>\n",
       "      <td>58.274970</td>\n",
       "      <td>33</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>145722.176643</td>\n",
       "      <td>134.763664</td>\n",
       "      <td>161.896289</td>\n",
       "      <td>56.573987</td>\n",
       "      <td>22.405431</td>\n",
       "      <td>129017.008886</td>\n",
       "      <td>132.584020</td>\n",
       "      <td>92.811928</td>\n",
       "      <td>70.885726</td>\n",
       "      <td>...</td>\n",
       "      <td>177.276424</td>\n",
       "      <td>75.495265</td>\n",
       "      <td>144481.162894</td>\n",
       "      <td>714.079307</td>\n",
       "      <td>479.736890</td>\n",
       "      <td>177.951749</td>\n",
       "      <td>82.045911</td>\n",
       "      <td>15</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>140913.312870</td>\n",
       "      <td>391.474820</td>\n",
       "      <td>189.215601</td>\n",
       "      <td>101.523999</td>\n",
       "      <td>53.700943</td>\n",
       "      <td>125825.270845</td>\n",
       "      <td>240.022315</td>\n",
       "      <td>172.903409</td>\n",
       "      <td>67.033814</td>\n",
       "      <td>...</td>\n",
       "      <td>179.029572</td>\n",
       "      <td>99.200845</td>\n",
       "      <td>139113.358533</td>\n",
       "      <td>538.265353</td>\n",
       "      <td>319.194184</td>\n",
       "      <td>166.890667</td>\n",
       "      <td>91.324348</td>\n",
       "      <td>15</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>143563.730896</td>\n",
       "      <td>130.290867</td>\n",
       "      <td>106.011743</td>\n",
       "      <td>78.497046</td>\n",
       "      <td>33.758302</td>\n",
       "      <td>127910.386371</td>\n",
       "      <td>134.891457</td>\n",
       "      <td>145.961473</td>\n",
       "      <td>85.727395</td>\n",
       "      <td>...</td>\n",
       "      <td>244.984054</td>\n",
       "      <td>133.153587</td>\n",
       "      <td>141930.137578</td>\n",
       "      <td>526.293667</td>\n",
       "      <td>340.607636</td>\n",
       "      <td>178.723713</td>\n",
       "      <td>97.026698</td>\n",
       "      <td>15</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>144558.602190</td>\n",
       "      <td>153.770130</td>\n",
       "      <td>125.678466</td>\n",
       "      <td>72.602936</td>\n",
       "      <td>21.071326</td>\n",
       "      <td>126747.529126</td>\n",
       "      <td>230.710292</td>\n",
       "      <td>135.593581</td>\n",
       "      <td>81.126577</td>\n",
       "      <td>...</td>\n",
       "      <td>95.220575</td>\n",
       "      <td>36.833564</td>\n",
       "      <td>137187.602513</td>\n",
       "      <td>273.696697</td>\n",
       "      <td>212.464538</td>\n",
       "      <td>77.028254</td>\n",
       "      <td>20.789644</td>\n",
       "      <td>7</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>140206.497791</td>\n",
       "      <td>766.378470</td>\n",
       "      <td>449.873103</td>\n",
       "      <td>272.014605</td>\n",
       "      <td>124.310900</td>\n",
       "      <td>127875.395317</td>\n",
       "      <td>142.972957</td>\n",
       "      <td>128.154705</td>\n",
       "      <td>85.836639</td>\n",
       "      <td>...</td>\n",
       "      <td>88.449260</td>\n",
       "      <td>27.084018</td>\n",
       "      <td>137864.926741</td>\n",
       "      <td>263.402863</td>\n",
       "      <td>194.499135</td>\n",
       "      <td>94.353743</td>\n",
       "      <td>22.416955</td>\n",
       "      <td>7</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>141786.889615</td>\n",
       "      <td>376.101051</td>\n",
       "      <td>152.100331</td>\n",
       "      <td>103.591109</td>\n",
       "      <td>51.607527</td>\n",
       "      <td>128244.568361</td>\n",
       "      <td>147.021071</td>\n",
       "      <td>87.192630</td>\n",
       "      <td>68.539443</td>\n",
       "      <td>...</td>\n",
       "      <td>148.964802</td>\n",
       "      <td>81.814697</td>\n",
       "      <td>135373.324926</td>\n",
       "      <td>150.113290</td>\n",
       "      <td>101.216958</td>\n",
       "      <td>75.745353</td>\n",
       "      <td>30.157585</td>\n",
       "      <td>7</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>134779.388277</td>\n",
       "      <td>258.503355</td>\n",
       "      <td>148.987731</td>\n",
       "      <td>117.204108</td>\n",
       "      <td>30.779796</td>\n",
       "      <td>136720.886207</td>\n",
       "      <td>267.515767</td>\n",
       "      <td>130.316437</td>\n",
       "      <td>100.966275</td>\n",
       "      <td>...</td>\n",
       "      <td>136.984337</td>\n",
       "      <td>47.839581</td>\n",
       "      <td>142137.517778</td>\n",
       "      <td>283.825617</td>\n",
       "      <td>186.596963</td>\n",
       "      <td>106.410181</td>\n",
       "      <td>28.011022</td>\n",
       "      <td>19</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>135713.371735</td>\n",
       "      <td>317.721206</td>\n",
       "      <td>221.935704</td>\n",
       "      <td>83.162156</td>\n",
       "      <td>39.095220</td>\n",
       "      <td>136147.675329</td>\n",
       "      <td>310.992284</td>\n",
       "      <td>161.346247</td>\n",
       "      <td>80.860865</td>\n",
       "      <td>...</td>\n",
       "      <td>154.899937</td>\n",
       "      <td>47.710152</td>\n",
       "      <td>142765.866310</td>\n",
       "      <td>286.411120</td>\n",
       "      <td>372.401339</td>\n",
       "      <td>112.413516</td>\n",
       "      <td>42.156228</td>\n",
       "      <td>19</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>136184.665470</td>\n",
       "      <td>356.847711</td>\n",
       "      <td>221.538899</td>\n",
       "      <td>81.425268</td>\n",
       "      <td>26.602300</td>\n",
       "      <td>136492.992598</td>\n",
       "      <td>393.972006</td>\n",
       "      <td>171.802972</td>\n",
       "      <td>64.146173</td>\n",
       "      <td>...</td>\n",
       "      <td>136.850159</td>\n",
       "      <td>37.685253</td>\n",
       "      <td>142240.966263</td>\n",
       "      <td>322.851321</td>\n",
       "      <td>247.203467</td>\n",
       "      <td>124.809375</td>\n",
       "      <td>34.820614</td>\n",
       "      <td>19</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>135542.067154</td>\n",
       "      <td>166.315172</td>\n",
       "      <td>117.353377</td>\n",
       "      <td>57.842780</td>\n",
       "      <td>34.887118</td>\n",
       "      <td>136041.529542</td>\n",
       "      <td>296.712978</td>\n",
       "      <td>116.800941</td>\n",
       "      <td>92.826274</td>\n",
       "      <td>...</td>\n",
       "      <td>200.242600</td>\n",
       "      <td>130.114279</td>\n",
       "      <td>142340.492548</td>\n",
       "      <td>267.539285</td>\n",
       "      <td>194.200387</td>\n",
       "      <td>71.081385</td>\n",
       "      <td>48.796249</td>\n",
       "      <td>31</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>134331.088085</td>\n",
       "      <td>221.361835</td>\n",
       "      <td>151.817175</td>\n",
       "      <td>64.847536</td>\n",
       "      <td>25.687461</td>\n",
       "      <td>135125.562061</td>\n",
       "      <td>224.046897</td>\n",
       "      <td>148.904612</td>\n",
       "      <td>64.629934</td>\n",
       "      <td>...</td>\n",
       "      <td>134.442962</td>\n",
       "      <td>55.209230</td>\n",
       "      <td>142860.500772</td>\n",
       "      <td>289.395201</td>\n",
       "      <td>260.013405</td>\n",
       "      <td>88.281249</td>\n",
       "      <td>27.970232</td>\n",
       "      <td>31</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>137881.960952</td>\n",
       "      <td>953.875005</td>\n",
       "      <td>208.667639</td>\n",
       "      <td>142.960234</td>\n",
       "      <td>59.817465</td>\n",
       "      <td>136431.180636</td>\n",
       "      <td>460.216190</td>\n",
       "      <td>175.923139</td>\n",
       "      <td>126.968330</td>\n",
       "      <td>...</td>\n",
       "      <td>98.982443</td>\n",
       "      <td>33.653411</td>\n",
       "      <td>145914.628566</td>\n",
       "      <td>934.105008</td>\n",
       "      <td>307.399427</td>\n",
       "      <td>102.188794</td>\n",
       "      <td>39.525635</td>\n",
       "      <td>31</td>\n",
       "      <td>hi</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>135924.365464</td>\n",
       "      <td>143.833154</td>\n",
       "      <td>90.007728</td>\n",
       "      <td>76.545071</td>\n",
       "      <td>26.692906</td>\n",
       "      <td>135104.697636</td>\n",
       "      <td>206.173734</td>\n",
       "      <td>110.852848</td>\n",
       "      <td>55.423831</td>\n",
       "      <td>...</td>\n",
       "      <td>123.778010</td>\n",
       "      <td>57.205891</td>\n",
       "      <td>141985.725717</td>\n",
       "      <td>167.147650</td>\n",
       "      <td>70.289654</td>\n",
       "      <td>82.980793</td>\n",
       "      <td>29.245036</td>\n",
       "      <td>23</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>135528.071502</td>\n",
       "      <td>163.348080</td>\n",
       "      <td>93.362658</td>\n",
       "      <td>55.669455</td>\n",
       "      <td>34.181911</td>\n",
       "      <td>135275.764353</td>\n",
       "      <td>268.463168</td>\n",
       "      <td>147.987525</td>\n",
       "      <td>74.629798</td>\n",
       "      <td>...</td>\n",
       "      <td>70.056260</td>\n",
       "      <td>36.115404</td>\n",
       "      <td>141617.052179</td>\n",
       "      <td>114.434750</td>\n",
       "      <td>72.804109</td>\n",
       "      <td>47.370602</td>\n",
       "      <td>18.416345</td>\n",
       "      <td>23</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>135889.661549</td>\n",
       "      <td>601.836069</td>\n",
       "      <td>244.710039</td>\n",
       "      <td>148.640625</td>\n",
       "      <td>81.500040</td>\n",
       "      <td>134548.063598</td>\n",
       "      <td>522.495758</td>\n",
       "      <td>237.610564</td>\n",
       "      <td>148.253882</td>\n",
       "      <td>...</td>\n",
       "      <td>145.886753</td>\n",
       "      <td>82.409321</td>\n",
       "      <td>142577.190923</td>\n",
       "      <td>317.032415</td>\n",
       "      <td>229.880340</td>\n",
       "      <td>105.017512</td>\n",
       "      <td>61.613280</td>\n",
       "      <td>23</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>143613.467662</td>\n",
       "      <td>1223.278943</td>\n",
       "      <td>1613.885315</td>\n",
       "      <td>647.314093</td>\n",
       "      <td>179.820200</td>\n",
       "      <td>127287.196633</td>\n",
       "      <td>238.851576</td>\n",
       "      <td>196.001161</td>\n",
       "      <td>107.278877</td>\n",
       "      <td>...</td>\n",
       "      <td>99.307393</td>\n",
       "      <td>34.451011</td>\n",
       "      <td>136968.219478</td>\n",
       "      <td>278.641017</td>\n",
       "      <td>109.097838</td>\n",
       "      <td>70.158244</td>\n",
       "      <td>36.629488</td>\n",
       "      <td>40</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>142629.472647</td>\n",
       "      <td>1309.657139</td>\n",
       "      <td>996.529006</td>\n",
       "      <td>692.904086</td>\n",
       "      <td>246.855247</td>\n",
       "      <td>125506.856995</td>\n",
       "      <td>132.842155</td>\n",
       "      <td>49.921070</td>\n",
       "      <td>102.712475</td>\n",
       "      <td>...</td>\n",
       "      <td>105.876477</td>\n",
       "      <td>66.006937</td>\n",
       "      <td>136659.408583</td>\n",
       "      <td>329.997293</td>\n",
       "      <td>164.824065</td>\n",
       "      <td>86.847238</td>\n",
       "      <td>38.144279</td>\n",
       "      <td>40</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>150873.806288</td>\n",
       "      <td>2817.368297</td>\n",
       "      <td>1079.145321</td>\n",
       "      <td>1213.553331</td>\n",
       "      <td>243.297573</td>\n",
       "      <td>130737.924508</td>\n",
       "      <td>610.936419</td>\n",
       "      <td>372.385784</td>\n",
       "      <td>196.273347</td>\n",
       "      <td>...</td>\n",
       "      <td>223.834822</td>\n",
       "      <td>115.798062</td>\n",
       "      <td>140170.101677</td>\n",
       "      <td>557.682696</td>\n",
       "      <td>313.168059</td>\n",
       "      <td>175.608429</td>\n",
       "      <td>97.314213</td>\n",
       "      <td>40</td>\n",
       "      <td>hi</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>155837.031578</td>\n",
       "      <td>281.736243</td>\n",
       "      <td>213.045698</td>\n",
       "      <td>89.016331</td>\n",
       "      <td>42.932162</td>\n",
       "      <td>130791.105629</td>\n",
       "      <td>532.020431</td>\n",
       "      <td>377.754509</td>\n",
       "      <td>129.387502</td>\n",
       "      <td>...</td>\n",
       "      <td>145.897930</td>\n",
       "      <td>77.675709</td>\n",
       "      <td>140732.499207</td>\n",
       "      <td>544.633269</td>\n",
       "      <td>360.373704</td>\n",
       "      <td>135.979210</td>\n",
       "      <td>63.000670</td>\n",
       "      <td>16</td>\n",
       "      <td>lo</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>50</td>\n",
       "      <td>149357.986725</td>\n",
       "      <td>532.541549</td>\n",
       "      <td>361.573263</td>\n",
       "      <td>117.610297</td>\n",
       "      <td>66.967106</td>\n",
       "      <td>126995.648278</td>\n",
       "      <td>546.122301</td>\n",
       "      <td>393.243901</td>\n",
       "      <td>148.791720</td>\n",
       "      <td>...</td>\n",
       "      <td>186.043335</td>\n",
       "      <td>73.687928</td>\n",
       "      <td>134010.663592</td>\n",
       "      <td>906.553676</td>\n",
       "      <td>657.708417</td>\n",
       "      <td>197.249304</td>\n",
       "      <td>115.367955</td>\n",
       "      <td>16</td>\n",
       "      <td>lo</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>100</td>\n",
       "      <td>147676.426350</td>\n",
       "      <td>412.497959</td>\n",
       "      <td>176.380418</td>\n",
       "      <td>81.154786</td>\n",
       "      <td>30.974379</td>\n",
       "      <td>126263.313179</td>\n",
       "      <td>335.392370</td>\n",
       "      <td>261.179835</td>\n",
       "      <td>133.575803</td>\n",
       "      <td>...</td>\n",
       "      <td>102.990334</td>\n",
       "      <td>56.522010</td>\n",
       "      <td>134233.452545</td>\n",
       "      <td>604.638972</td>\n",
       "      <td>234.751562</td>\n",
       "      <td>77.576786</td>\n",
       "      <td>48.015327</td>\n",
       "      <td>16</td>\n",
       "      <td>lo</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>129475.424359</td>\n",
       "      <td>818.453552</td>\n",
       "      <td>318.843930</td>\n",
       "      <td>183.848633</td>\n",
       "      <td>107.004298</td>\n",
       "      <td>130564.062934</td>\n",
       "      <td>433.215668</td>\n",
       "      <td>145.750168</td>\n",
       "      <td>79.752621</td>\n",
       "      <td>...</td>\n",
       "      <td>109.592210</td>\n",
       "      <td>63.460193</td>\n",
       "      <td>149338.415760</td>\n",
       "      <td>750.876994</td>\n",
       "      <td>145.091687</td>\n",
       "      <td>116.334291</td>\n",
       "      <td>66.623049</td>\n",
       "      <td>4</td>\n",
       "      <td>lo</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>40 rows × 74 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0      AF3_Delta    AF3_Theta    AF3_Alpha     AF3_Beta  \\\n",
       "0             0  141066.648380   151.692854   319.007613   109.440743   \n",
       "50           50  144658.835390   220.422728   779.900723   114.260274   \n",
       "100         100  146071.638711   263.775598   864.127195   118.460166   \n",
       "0             0  138392.988935  1855.808666  1033.883250   526.549600   \n",
       "50           50  139780.131901  1481.894783   933.311736   449.358233   \n",
       "100         100  135177.158649  1771.610858   738.047210   487.100153   \n",
       "0             0  149156.507732   157.282063   262.710099   102.717641   \n",
       "50           50  150002.529628   237.774108   321.713323    80.415566   \n",
       "100         100  148783.654783   135.353536   129.022284    86.649525   \n",
       "0             0  133856.148395    63.916359    39.398779    28.029808   \n",
       "50           50  133065.327626   117.825833   101.193341    71.843714   \n",
       "100         100  133793.957524   334.103949   112.552525    74.685869   \n",
       "0             0  150085.057826   253.236453   206.643496    78.307118   \n",
       "50           50  149141.889252   238.642026   132.175146    75.030593   \n",
       "100         100  149253.689676   120.411030    99.346807    62.091548   \n",
       "0             0  149608.897407    90.087583    82.468495    66.001643   \n",
       "50           50  149317.861527   158.283540   103.821908    98.483453   \n",
       "100         100  149736.472573   429.140741   225.607398   142.573287   \n",
       "0             0  145722.176643   134.763664   161.896289    56.573987   \n",
       "50           50  140913.312870   391.474820   189.215601   101.523999   \n",
       "100         100  143563.730896   130.290867   106.011743    78.497046   \n",
       "0             0  144558.602190   153.770130   125.678466    72.602936   \n",
       "50           50  140206.497791   766.378470   449.873103   272.014605   \n",
       "100         100  141786.889615   376.101051   152.100331   103.591109   \n",
       "0             0  134779.388277   258.503355   148.987731   117.204108   \n",
       "50           50  135713.371735   317.721206   221.935704    83.162156   \n",
       "100         100  136184.665470   356.847711   221.538899    81.425268   \n",
       "0             0  135542.067154   166.315172   117.353377    57.842780   \n",
       "50           50  134331.088085   221.361835   151.817175    64.847536   \n",
       "100         100  137881.960952   953.875005   208.667639   142.960234   \n",
       "0             0  135924.365464   143.833154    90.007728    76.545071   \n",
       "50           50  135528.071502   163.348080    93.362658    55.669455   \n",
       "100         100  135889.661549   601.836069   244.710039   148.640625   \n",
       "0             0  143613.467662  1223.278943  1613.885315   647.314093   \n",
       "50           50  142629.472647  1309.657139   996.529006   692.904086   \n",
       "100         100  150873.806288  2817.368297  1079.145321  1213.553331   \n",
       "0             0  155837.031578   281.736243   213.045698    89.016331   \n",
       "50           50  149357.986725   532.541549   361.573263   117.610297   \n",
       "100         100  147676.426350   412.497959   176.380418    81.154786   \n",
       "0             0  129475.424359   818.453552   318.843930   183.848633   \n",
       "\n",
       "      AF3_Gamma       F7_Delta     F7_Theta     F7_Alpha     F7_Beta  ...  \\\n",
       "0     48.074784  148852.650305   259.193142   376.905330   68.034017  ...   \n",
       "50    23.851608  151953.865926   145.204845   677.816665   77.198758  ...   \n",
       "100   33.834207  153315.389500   239.427556   659.540641   97.702703  ...   \n",
       "0    283.826881  137848.446681  2488.942221  1343.269461  692.792018  ...   \n",
       "50   230.436044  136577.087573  1989.044537   865.988773  458.464880  ...   \n",
       "100  238.428647  150473.861395  2288.415268  1009.569258  350.550397  ...   \n",
       "0     22.022006  129927.916846   126.038866   205.987715   85.004530  ...   \n",
       "50    28.279437  131403.428152   300.946113   209.155781   75.349118  ...   \n",
       "100   28.150646  129168.211105   204.993767   117.542636   89.491902  ...   \n",
       "0     17.134230  131942.740164   130.003757    85.235576   62.919793  ...   \n",
       "50    28.053973  132576.890033   628.650130   274.007311  142.964121  ...   \n",
       "100   23.958087  131828.342274    91.584585    95.963595   56.368909  ...   \n",
       "0     25.319552  130205.383305   178.485754   109.380758   53.226500  ...   \n",
       "50    21.951600  130221.607991   289.616828    86.039844   56.612557  ...   \n",
       "100   25.882486  129786.368333   208.731325   108.986141   62.136960  ...   \n",
       "0     26.366445  131048.260982   218.174245   159.474565   75.150923  ...   \n",
       "50    44.093692  129482.011211   282.251001   180.214686   79.428388  ...   \n",
       "100   72.995587  135601.713550  1917.649600   385.438690  322.094477  ...   \n",
       "0     22.405431  129017.008886   132.584020    92.811928   70.885726  ...   \n",
       "50    53.700943  125825.270845   240.022315   172.903409   67.033814  ...   \n",
       "100   33.758302  127910.386371   134.891457   145.961473   85.727395  ...   \n",
       "0     21.071326  126747.529126   230.710292   135.593581   81.126577  ...   \n",
       "50   124.310900  127875.395317   142.972957   128.154705   85.836639  ...   \n",
       "100   51.607527  128244.568361   147.021071    87.192630   68.539443  ...   \n",
       "0     30.779796  136720.886207   267.515767   130.316437  100.966275  ...   \n",
       "50    39.095220  136147.675329   310.992284   161.346247   80.860865  ...   \n",
       "100   26.602300  136492.992598   393.972006   171.802972   64.146173  ...   \n",
       "0     34.887118  136041.529542   296.712978   116.800941   92.826274  ...   \n",
       "50    25.687461  135125.562061   224.046897   148.904612   64.629934  ...   \n",
       "100   59.817465  136431.180636   460.216190   175.923139  126.968330  ...   \n",
       "0     26.692906  135104.697636   206.173734   110.852848   55.423831  ...   \n",
       "50    34.181911  135275.764353   268.463168   147.987525   74.629798  ...   \n",
       "100   81.500040  134548.063598   522.495758   237.610564  148.253882  ...   \n",
       "0    179.820200  127287.196633   238.851576   196.001161  107.278877  ...   \n",
       "50   246.855247  125506.856995   132.842155    49.921070  102.712475  ...   \n",
       "100  243.297573  130737.924508   610.936419   372.385784  196.273347  ...   \n",
       "0     42.932162  130791.105629   532.020431   377.754509  129.387502  ...   \n",
       "50    66.967106  126995.648278   546.122301   393.243901  148.791720  ...   \n",
       "100   30.974379  126263.313179   335.392370   261.179835  133.575803  ...   \n",
       "0    107.004298  130564.062934   433.215668   145.750168   79.752621  ...   \n",
       "\n",
       "        F8_Beta    F8_Gamma      AF4_Delta   AF4_Theta   AF4_Alpha  \\\n",
       "0    134.392672   71.025734  143308.372849  270.738332  298.306886   \n",
       "50   357.018443  177.315036  141052.860216  470.558070  880.152078   \n",
       "100  102.350771   32.440989  144716.689488  341.959544  722.640165   \n",
       "0     89.015625   33.482549  149041.532131  249.514158  150.569900   \n",
       "50    84.369226   26.790312  148345.030189  221.637591  146.439274   \n",
       "100   70.974183   23.391432  148849.298481  242.963142  144.292472   \n",
       "0    126.648929   41.713656  137258.901569  123.482257  281.258647   \n",
       "50   109.151042   25.065443  137728.295472  268.835443  324.119295   \n",
       "100  124.298621   57.756236  137443.668968  162.936382  141.437012   \n",
       "0    158.800879   55.645085  151441.807687   87.715338   65.873997   \n",
       "50   139.009027   47.162003  150368.716780  107.440547   60.381997   \n",
       "100  106.414084   47.719334  150623.065118   94.379057   91.629277   \n",
       "0    118.493296   59.892965  138734.682866  309.466935  234.911688   \n",
       "50   146.993035   68.058922  137187.408786  307.278576  165.773269   \n",
       "100   90.159397   29.208711  137914.138085  280.683171  145.098596   \n",
       "0     97.674918   22.519320  138282.828443  449.039390  191.672865   \n",
       "50   111.412685   50.410781  138217.007734  320.043108  100.575211   \n",
       "100  136.756622   69.208714  138222.569442  289.332204  154.828303   \n",
       "0    177.276424   75.495265  144481.162894  714.079307  479.736890   \n",
       "50   179.029572   99.200845  139113.358533  538.265353  319.194184   \n",
       "100  244.984054  133.153587  141930.137578  526.293667  340.607636   \n",
       "0     95.220575   36.833564  137187.602513  273.696697  212.464538   \n",
       "50    88.449260   27.084018  137864.926741  263.402863  194.499135   \n",
       "100  148.964802   81.814697  135373.324926  150.113290  101.216958   \n",
       "0    136.984337   47.839581  142137.517778  283.825617  186.596963   \n",
       "50   154.899937   47.710152  142765.866310  286.411120  372.401339   \n",
       "100  136.850159   37.685253  142240.966263  322.851321  247.203467   \n",
       "0    200.242600  130.114279  142340.492548  267.539285  194.200387   \n",
       "50   134.442962   55.209230  142860.500772  289.395201  260.013405   \n",
       "100   98.982443   33.653411  145914.628566  934.105008  307.399427   \n",
       "0    123.778010   57.205891  141985.725717  167.147650   70.289654   \n",
       "50    70.056260   36.115404  141617.052179  114.434750   72.804109   \n",
       "100  145.886753   82.409321  142577.190923  317.032415  229.880340   \n",
       "0     99.307393   34.451011  136968.219478  278.641017  109.097838   \n",
       "50   105.876477   66.006937  136659.408583  329.997293  164.824065   \n",
       "100  223.834822  115.798062  140170.101677  557.682696  313.168059   \n",
       "0    145.897930   77.675709  140732.499207  544.633269  360.373704   \n",
       "50   186.043335   73.687928  134010.663592  906.553676  657.708417   \n",
       "100  102.990334   56.522010  134233.452545  604.638972  234.751562   \n",
       "0    109.592210   63.460193  149338.415760  750.876994  145.091687   \n",
       "\n",
       "       AF4_Beta   AF4_Gamma  subj  hilo  subjective_rating  \n",
       "0    155.541612   33.208245    22    lo                  5  \n",
       "50   194.737606   81.950629    22    lo                  5  \n",
       "100  166.428019   63.080003    22    lo                  5  \n",
       "0     82.769339   37.370594    30    lo                  1  \n",
       "50    96.299765   26.084111    30    lo                  1  \n",
       "100   67.431127   26.192315    30    lo                  1  \n",
       "0    107.693431   20.714531     9    hi                  7  \n",
       "50    99.362856   19.579199     9    hi                  7  \n",
       "100   89.045810   35.366350     9    hi                  7  \n",
       "0     52.586682   15.511551    17    hi                  9  \n",
       "50    73.030731   16.764780    17    hi                  9  \n",
       "100   46.270625   16.448099    17    hi                  9  \n",
       "0     93.386232   35.679778    21    hi                  6  \n",
       "50   100.317090   40.393618    21    hi                  6  \n",
       "100   80.053563   22.344614    21    hi                  6  \n",
       "0     81.890421   40.886195    33    hi                  5  \n",
       "50   114.475486   42.987479    33    hi                  5  \n",
       "100  116.664828   58.274970    33    hi                  5  \n",
       "0    177.951749   82.045911    15    hi                  6  \n",
       "50   166.890667   91.324348    15    hi                  6  \n",
       "100  178.723713   97.026698    15    hi                  6  \n",
       "0     77.028254   20.789644     7    hi                  5  \n",
       "50    94.353743   22.416955     7    hi                  5  \n",
       "100   75.745353   30.157585     7    hi                  5  \n",
       "0    106.410181   28.011022    19    hi                  5  \n",
       "50   112.413516   42.156228    19    hi                  5  \n",
       "100  124.809375   34.820614    19    hi                  5  \n",
       "0     71.081385   48.796249    31    hi                  6  \n",
       "50    88.281249   27.970232    31    hi                  6  \n",
       "100  102.188794   39.525635    31    hi                  6  \n",
       "0     82.980793   29.245036    23    hi                  5  \n",
       "50    47.370602   18.416345    23    hi                  5  \n",
       "100  105.017512   61.613280    23    hi                  5  \n",
       "0     70.158244   36.629488    40    hi                  5  \n",
       "50    86.847238   38.144279    40    hi                  5  \n",
       "100  175.608429   97.314213    40    hi                  5  \n",
       "0    135.979210   63.000670    16    lo                  2  \n",
       "50   197.249304  115.367955    16    lo                  2  \n",
       "100   77.576786   48.015327    16    lo                  2  \n",
       "0    116.334291   66.623049     4    lo                  2  \n",
       "\n",
       "[40 rows x 74 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dataframe of data\n",
    "eeg_data[0:2000:50]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
       "       'AF3_Gamma', 'F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma',\n",
       "       'F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma', 'FC5_Delta',\n",
       "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma', 'T7_Delta',\n",
       "       'T7_Theta', 'T7_Alpha', 'T7_Beta', 'T7_Gamma', 'P7_Delta', 'P7_Theta',\n",
       "       'P7_Alpha', 'P7_Beta', 'P7_Gamma', 'O1_Delta', 'O1_Theta', 'O1_Alpha',\n",
       "       'O1_Beta', 'O1_Gamma', 'O2_Delta', 'O2_Theta', 'O2_Alpha', 'O2_Beta',\n",
       "       'O2_Gamma', 'P8_Delta', 'P8_Theta', 'P8_Alpha', 'P8_Beta', 'P8_Gamma',\n",
       "       'T8_Delta', 'T8_Theta', 'T8_Alpha', 'T8_Beta', 'T8_Gamma', 'FC6_Delta',\n",
       "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma', 'F4_Delta',\n",
       "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma', 'F8_Delta', 'F8_Theta',\n",
       "       'F8_Alpha', 'F8_Beta', 'F8_Gamma', 'AF4_Delta', 'AF4_Theta',\n",
       "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma', 'subj', 'hilo',\n",
       "       'subjective_rating'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#list of EEG brainwave features\n",
    "eeg_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#list of all electrodes\n",
    "all_electrodes = ['AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
    "       'AF3_Gamma', 'F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma',\n",
    "       'F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma', 'FC5_Delta',\n",
    "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma', 'T7_Delta',\n",
    "       'T7_Theta', 'T7_Alpha', 'T7_Beta', 'T7_Gamma', 'P7_Delta', 'P7_Theta',\n",
    "       'P7_Alpha', 'P7_Beta', 'P7_Gamma', 'O1_Delta', 'O1_Theta', 'O1_Alpha',\n",
    "       'O1_Beta', 'O1_Gamma', 'O2_Delta', 'O2_Theta', 'O2_Alpha', 'O2_Beta',\n",
    "       'O2_Gamma', 'P8_Delta', 'P8_Theta', 'P8_Alpha', 'P8_Beta', 'P8_Gamma',\n",
    "       'T8_Delta', 'T8_Theta', 'T8_Alpha', 'T8_Beta', 'T8_Gamma', 'FC6_Delta',\n",
    "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma', 'F4_Delta',\n",
    "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma', 'F8_Delta', 'F8_Theta',\n",
    "       'F8_Alpha', 'F8_Beta', 'F8_Gamma', 'AF4_Delta', 'AF4_Theta',\n",
    "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma'];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#channel extraction - significant electrodes\n",
    "frontal_lobe = ['AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
    "       'AF3_Gamma','F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma','FC5_Delta',\n",
    "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma','F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma','F8_Delta', 'F8_Theta',\n",
    "       'F8_Alpha', 'F8_Beta', 'F8_Gamma','FC6_Delta',\n",
    "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma','F4_Delta',\n",
    "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma','AF4_Delta', 'AF4_Theta',\n",
    "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma']\n",
    "frontal_lobe_df = eeg_data[frontal_lobe]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the rest of the electrodes\n",
    "non_frontal_lobe = [i for i in all_electrodes if i not in frontal_lobe]\n",
    "non_frontal_lobe_df = eeg_data[non_frontal_lobe]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#comparing the averages of frontal lobe electrodes vs non frontal\n",
    "\n",
    "np.mean(frontal_lobe_df.mean()) > np.mean(non_frontal_lobe_df.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "fl_mean = frontal_lobe_df.mean()\n",
    "nfl_mean = non_frontal_lobe_df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "eeg_data_numerical = eeg_data[frontal_lobe]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalizing features using MinMaxScaler\n",
    "scaler = MinMaxScaler(feature_range=(0,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#transform training data\n",
    "rescaled_eeg_numerical = scaler.fit_transform(eeg_data_numerical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.49543682, 0.00475672, 0.01336142, ..., 0.00998496, 0.01424904,\n",
       "        0.00746155],\n",
       "       [0.49795147, 0.01039272, 0.03347668, ..., 0.0248418 , 0.01382999,\n",
       "        0.00816444],\n",
       "       [0.50062189, 0.01255343, 0.02515882, ..., 0.02171939, 0.01623411,\n",
       "        0.01318252],\n",
       "       ...,\n",
       "       [0.52935747, 0.055745  , 0.04348562, ..., 0.03845177, 0.05733792,\n",
       "        0.07300399],\n",
       "       [0.55864416, 0.02977364, 0.02555853, ..., 0.02483432, 0.03035306,\n",
       "        0.04070088],\n",
       "       [0.51632055, 0.01211344, 0.01168217, ..., 0.00829661, 0.01259278,\n",
       "        0.01426803]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "rescaled_eeg_numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lo = [0, 1], hi = [1, 0]\n",
    "hilo = eeg_data['hilo']\n",
    "\n",
    "#hilo_encoded = [ [0, 1] if i=='lo' else [1, 0] for i in hilo]\n",
    "\n",
    "# 1 to 3 = low (1), 4 to 6 = med (2), 7 to 9 hi (3)\n",
    "subjective_ratings = eeg_data['subjective_rating'].values;\n",
    "subjective_ratings_grouped = [ 1 if (1<= i <=3) else 2 if (4 <= i <= 6) else 3 for i in subjective_ratings ]\n",
    "\n",
    "# lo = 1; med = 2; hi=3 // lo = [0, 0, 1], med = [0, 1, 0], hi = [0, 0, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = transformed_dataset = np.array(rescaled_eeg_numerical)\n",
    "\n",
    "\n",
    "#X = transformed_dataset = np.array([ list(rescaled_eeg_numerical[i]) + hilo_encoded[i] for i in range(len(rescaled_eeg_numerical))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.array(subjective_ratings_grouped)\n",
    "y;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((10350, 40), (10350,))"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transformed_dataset.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3450, 3150, 3750)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(y).count(1), list(y).count(2), list(y).count(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "#??KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_parameters = { 'n_neighbors': [2,3,4, 5,6], 'weights': ('uniform', 'distance') } "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_classifier = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_classifier = GridSearchCV(knn_classifier, knn_parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
       "                                            metric='minkowski',\n",
       "                                            metric_params=None, n_jobs=None,\n",
       "                                            n_neighbors=5, p=2,\n",
       "                                            weights='uniform'),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'n_neighbors': [2, 3, 4, 5, 6],\n",
       "                         'weights': ('uniform', 'distance')},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_n_neighbors</th>\n",
       "      <th>param_weights</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.028336</td>\n",
       "      <td>0.004068</td>\n",
       "      <td>1.035666</td>\n",
       "      <td>0.104480</td>\n",
       "      <td>2</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 2, 'weights': 'uniform'}</td>\n",
       "      <td>0.800725</td>\n",
       "      <td>0.781401</td>\n",
       "      <td>0.788647</td>\n",
       "      <td>0.785628</td>\n",
       "      <td>0.808575</td>\n",
       "      <td>0.792995</td>\n",
       "      <td>0.010100</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.028901</td>\n",
       "      <td>0.003894</td>\n",
       "      <td>0.918066</td>\n",
       "      <td>0.099966</td>\n",
       "      <td>2</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 2, 'weights': 'distance'}</td>\n",
       "      <td>0.814010</td>\n",
       "      <td>0.791063</td>\n",
       "      <td>0.809179</td>\n",
       "      <td>0.809179</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.811353</td>\n",
       "      <td>0.013501</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.028586</td>\n",
       "      <td>0.001985</td>\n",
       "      <td>1.036737</td>\n",
       "      <td>0.080376</td>\n",
       "      <td>3</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'uniform'}</td>\n",
       "      <td>0.830314</td>\n",
       "      <td>0.800725</td>\n",
       "      <td>0.815217</td>\n",
       "      <td>0.828502</td>\n",
       "      <td>0.831522</td>\n",
       "      <td>0.821256</td>\n",
       "      <td>0.011815</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.025856</td>\n",
       "      <td>0.004457</td>\n",
       "      <td>0.935000</td>\n",
       "      <td>0.099370</td>\n",
       "      <td>3</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'distance'}</td>\n",
       "      <td>0.829106</td>\n",
       "      <td>0.807367</td>\n",
       "      <td>0.817633</td>\n",
       "      <td>0.829106</td>\n",
       "      <td>0.830314</td>\n",
       "      <td>0.822705</td>\n",
       "      <td>0.008954</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.024210</td>\n",
       "      <td>0.003577</td>\n",
       "      <td>1.052744</td>\n",
       "      <td>0.141661</td>\n",
       "      <td>4</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 4, 'weights': 'uniform'}</td>\n",
       "      <td>0.825483</td>\n",
       "      <td>0.811594</td>\n",
       "      <td>0.798309</td>\n",
       "      <td>0.824879</td>\n",
       "      <td>0.827899</td>\n",
       "      <td>0.817633</td>\n",
       "      <td>0.011220</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.027019</td>\n",
       "      <td>0.003379</td>\n",
       "      <td>0.949259</td>\n",
       "      <td>0.093154</td>\n",
       "      <td>4</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 4, 'weights': 'distance'}</td>\n",
       "      <td>0.841184</td>\n",
       "      <td>0.811594</td>\n",
       "      <td>0.817633</td>\n",
       "      <td>0.831522</td>\n",
       "      <td>0.838164</td>\n",
       "      <td>0.828019</td>\n",
       "      <td>0.011543</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.026046</td>\n",
       "      <td>0.006482</td>\n",
       "      <td>1.102401</td>\n",
       "      <td>0.096154</td>\n",
       "      <td>5</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'uniform'}</td>\n",
       "      <td>0.830918</td>\n",
       "      <td>0.807367</td>\n",
       "      <td>0.803744</td>\n",
       "      <td>0.827295</td>\n",
       "      <td>0.832126</td>\n",
       "      <td>0.820290</td>\n",
       "      <td>0.012189</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.029537</td>\n",
       "      <td>0.002670</td>\n",
       "      <td>1.019468</td>\n",
       "      <td>0.084776</td>\n",
       "      <td>5</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'distance'}</td>\n",
       "      <td>0.835749</td>\n",
       "      <td>0.809783</td>\n",
       "      <td>0.816425</td>\n",
       "      <td>0.836353</td>\n",
       "      <td>0.832729</td>\n",
       "      <td>0.826208</td>\n",
       "      <td>0.010972</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.025690</td>\n",
       "      <td>0.001668</td>\n",
       "      <td>1.055749</td>\n",
       "      <td>0.085753</td>\n",
       "      <td>6</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 6, 'weights': 'uniform'}</td>\n",
       "      <td>0.835145</td>\n",
       "      <td>0.803140</td>\n",
       "      <td>0.804348</td>\n",
       "      <td>0.833937</td>\n",
       "      <td>0.827295</td>\n",
       "      <td>0.820773</td>\n",
       "      <td>0.014164</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.026953</td>\n",
       "      <td>0.002204</td>\n",
       "      <td>0.980337</td>\n",
       "      <td>0.096235</td>\n",
       "      <td>6</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 6, 'weights': 'distance'}</td>\n",
       "      <td>0.840580</td>\n",
       "      <td>0.809783</td>\n",
       "      <td>0.819444</td>\n",
       "      <td>0.838768</td>\n",
       "      <td>0.837560</td>\n",
       "      <td>0.829227</td>\n",
       "      <td>0.012354</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       0.028336      0.004068         1.035666        0.104480   \n",
       "1       0.028901      0.003894         0.918066        0.099966   \n",
       "2       0.028586      0.001985         1.036737        0.080376   \n",
       "3       0.025856      0.004457         0.935000        0.099370   \n",
       "4       0.024210      0.003577         1.052744        0.141661   \n",
       "5       0.027019      0.003379         0.949259        0.093154   \n",
       "6       0.026046      0.006482         1.102401        0.096154   \n",
       "7       0.029537      0.002670         1.019468        0.084776   \n",
       "8       0.025690      0.001668         1.055749        0.085753   \n",
       "9       0.026953      0.002204         0.980337        0.096235   \n",
       "\n",
       "  param_n_neighbors param_weights                                     params  \\\n",
       "0                 2       uniform   {'n_neighbors': 2, 'weights': 'uniform'}   \n",
       "1                 2      distance  {'n_neighbors': 2, 'weights': 'distance'}   \n",
       "2                 3       uniform   {'n_neighbors': 3, 'weights': 'uniform'}   \n",
       "3                 3      distance  {'n_neighbors': 3, 'weights': 'distance'}   \n",
       "4                 4       uniform   {'n_neighbors': 4, 'weights': 'uniform'}   \n",
       "5                 4      distance  {'n_neighbors': 4, 'weights': 'distance'}   \n",
       "6                 5       uniform   {'n_neighbors': 5, 'weights': 'uniform'}   \n",
       "7                 5      distance  {'n_neighbors': 5, 'weights': 'distance'}   \n",
       "8                 6       uniform   {'n_neighbors': 6, 'weights': 'uniform'}   \n",
       "9                 6      distance  {'n_neighbors': 6, 'weights': 'distance'}   \n",
       "\n",
       "   split0_test_score  split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0           0.800725           0.781401           0.788647           0.785628   \n",
       "1           0.814010           0.791063           0.809179           0.809179   \n",
       "2           0.830314           0.800725           0.815217           0.828502   \n",
       "3           0.829106           0.807367           0.817633           0.829106   \n",
       "4           0.825483           0.811594           0.798309           0.824879   \n",
       "5           0.841184           0.811594           0.817633           0.831522   \n",
       "6           0.830918           0.807367           0.803744           0.827295   \n",
       "7           0.835749           0.809783           0.816425           0.836353   \n",
       "8           0.835145           0.803140           0.804348           0.833937   \n",
       "9           0.840580           0.809783           0.819444           0.838768   \n",
       "\n",
       "   split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
       "0           0.808575         0.792995        0.010100               10  \n",
       "1           0.833333         0.811353        0.013501                9  \n",
       "2           0.831522         0.821256        0.011815                5  \n",
       "3           0.830314         0.822705        0.008954                4  \n",
       "4           0.827899         0.817633        0.011220                8  \n",
       "5           0.838164         0.828019        0.011543                2  \n",
       "6           0.832126         0.820290        0.012189                7  \n",
       "7           0.832729         0.826208        0.010972                3  \n",
       "8           0.827295         0.820773        0.014164                6  \n",
       "9           0.837560         0.829227        0.012354                1  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(knn_classifier.cv_results_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'n_neighbors': 6, 'weights': 'distance'}, 0.8292270531400965)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_classifier.best_params_, knn_classifier.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.8272946859903382\n"
     ]
    }
   ],
   "source": [
    "y_predict = knn_classifier.predict(X_test)\n",
    "\n",
    "cross = cross_val_score(knn_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.8789    0.8500    0.8642       700\n",
      "           2     0.7891    0.8145    0.8016       620\n",
      "           3     0.8406    0.8440    0.8423       750\n",
      "\n",
      "    accuracy                         0.8372      2070\n",
      "   macro avg     0.8362    0.8362    0.8360      2070\n",
      "weighted avg     0.8381    0.8372    0.8375      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(knn_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RANDOM FOREST\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n",
       "                                              class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              max_samples=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators=100, n_jobs=None,\n",
       "                                              oob_score=False,\n",
       "                                              random_state=None, verbose=0,\n",
       "                                              warm_start=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'criterion': ('gini', 'entropy'),\n",
       "                         'max_depth': (1, 3, 5, 7, 9, 10),\n",
       "                         'max_features': ('auto', 'sqrt'),\n",
       "                         'min_samples_split': (2, 4, 6),\n",
       "                         'n_estimators': (1, 10, 30, 50, 70, 90, 100)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest_classifier = RandomForestClassifier()\n",
    "random_forest_classifier.fit(X_train, y_train)\n",
    "\n",
    "y_predict = random_forest_classifier.predict(X_test)\n",
    "\n",
    "rf_parameters = {'n_estimators': (1,10,30,50,70,90, 100), 'criterion':('gini','entropy'),\n",
    "                 'max_depth':(1,3,5,7,9,10), 'max_features':('auto','sqrt'), 'min_samples_split':(2,4,6)}\n",
    "\n",
    "random_forest_classifier = GridSearchCV(random_forest_classifier, rf_parameters)\n",
    "\n",
    "random_forest_classifier.fit(X_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'entropy',\n",
       " 'max_depth': 10,\n",
       " 'max_features': 'auto',\n",
       " 'min_samples_split': 4,\n",
       " 'n_estimators': 100}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest_classifier.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.7782608695652173\n"
     ]
    }
   ],
   "source": [
    "cross = cross_val_score(random_forest_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "#??plot_confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.8716    0.8729    0.8722       700\n",
      "           2     0.8414    0.7871    0.8133       620\n",
      "           3     0.8226    0.8653    0.8434       750\n",
      "\n",
      "    accuracy                         0.8444      2070\n",
      "   macro avg     0.8452    0.8418    0.8430      2070\n",
      "weighted avg     0.8448    0.8444    0.8441      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(random_forest_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "disp = plot_confusion_matrix(random_forest_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues, values_format='.5g')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x1a1e46d850>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(random_forest_classifier, X_train, y_train,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues, values_format='.5g')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3450, 3150, 3750)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(y).count(1), list(y).count(2), list(y).count(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.88      0.86      0.87       700\n",
      "           2       0.83      0.79      0.81       620\n",
      "           3       0.82      0.86      0.84       750\n",
      "\n",
      "    accuracy                           0.84      2070\n",
      "   macro avg       0.84      0.84      0.84      2070\n",
      "weighted avg       0.84      0.84      0.84      2070\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_predict))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features=None,\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              presort='deprecated',\n",
       "                                              random_state=None,\n",
       "                                              splitter='best'),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'criterion': ['gini', 'entropy'],\n",
       "                         'max_depth': [1, 2, 3, 4, 5, 6, 7, None]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier = DecisionTreeClassifier()\n",
    "decision_tree_classifier.fit(X_train, y_train)\n",
    "\n",
    "dt_parameters={\"criterion\":[\"gini\",\"entropy\"],\n",
    "              \"max_depth\":[1,2,3,4,5,6,7,None]}\n",
    "\n",
    "y_predict = decision_tree_classifier.predict(X_test)\n",
    "\n",
    "decision_tree_classifier = GridSearchCV(decision_tree_classifier, dt_parameters)\n",
    "\n",
    "decision_tree_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'entropy', 'max_depth': None}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.6919082125603864\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.7288    0.7371    0.7330       700\n",
      "           2     0.6724    0.6952    0.6836       620\n",
      "           3     0.7101    0.6827    0.6961       750\n",
      "\n",
      "    accuracy                         0.7048      2070\n",
      "   macro avg     0.7038    0.7050    0.7042      2070\n",
      "weighted avg     0.7051    0.7048    0.7048      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_predict = decision_tree_classifier.predict(X_test)\n",
    "cross = cross_val_score(decision_tree_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)\n",
    "\n",
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(decision_tree_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier = DecisionTreeClassifier()\n",
    "decision_tree_classifier.fit(X_train, y_train)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
