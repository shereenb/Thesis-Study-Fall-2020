{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import scipy\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_dir = os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_ratings = pd.read_csv('ratings.txt', header=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'22_lo.csv'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_dir[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[22  5  8]]\n",
      "[[30  1  8]]\n",
      "[[9 1 7]]\n",
      "[[17  1  9]]\n",
      "[[21  1  6]]\n",
      "[[33  1  5]]\n",
      "[[15  1  6]]\n",
      "[[7 1 5]]\n",
      "[[19  1  5]]\n",
      "[[31  1  6]]\n",
      "[[23  1  5]]\n",
      "[[40  1  5]]\n",
      "[[16  2  9]]\n",
      "[[4 2 5]]\n",
      "[[32  2  7]]\n",
      "[[43  1  7]]\n",
      "[[20  2  8]]\n",
      "[[27  1  4]]\n",
      "[[44  3  8]]\n",
      "[[39  3  8]]\n",
      "[[48  1  7]]\n",
      "[[35  2  4]]\n",
      "[[3 1 5]]\n",
      "[[11  1  5]]\n",
      "[[28  2  7]]\n",
      "[[34  3  9]]\n",
      "[[26  1  8]]\n",
      "[[38  1  5]]\n",
      "[[10  1  6]]\n",
      "[[29  3  6]]\n",
      "[[37  3  8]]\n",
      "[[46  2  7]]\n",
      "[[25  2  4]]\n",
      "[[13  2  7]]\n",
      "[[1 2 8]]\n",
      "[[20  2  8]]\n",
      "[[43  1  7]]\n",
      "[[32  2  7]]\n",
      "[[4 2 5]]\n",
      "[[16  2  9]]\n",
      "[[8 3 7]]\n",
      "[[15  1  6]]\n",
      "[[17  1  9]]\n",
      "[[9 1 7]]\n",
      "[[30  1  8]]\n",
      "[[41  3  6]]\n",
      "[[22  5  8]]\n",
      "[[14  2  7]]\n",
      "[[18  4  7]]\n",
      "[[6 4 7]]\n",
      "[[1 2 8]]\n",
      "[[13  2  7]]\n",
      "[[25  2  4]]\n",
      "[[46  2  7]]\n",
      "[[37  3  8]]\n",
      "[[2 1 5]]\n",
      "[[10  1  6]]\n",
      "[[38  1  5]]\n",
      "[[45  1  8]]\n",
      "[[26  1  8]]\n",
      "[[34  3  9]]\n",
      "[[12  1  6]]\n",
      "[[36  2  8]]\n",
      "[[28  2  7]]\n",
      "[[47  1  8]]\n",
      "[[11  1  5]]\n",
      "[[3 1 5]]\n",
      "[[48  1  7]]\n",
      "[[44  3  8]]\n"
     ]
    }
   ],
   "source": [
    "#creating dataframe for brainwave features\n",
    "eeg_data = []\n",
    "\n",
    "for ftemp in current_dir:\n",
    "    if ftemp[-3:] == 'csv':\n",
    "        tgt_partic = int(ftemp[0:2])\n",
    "        #print(tgt_partic)\n",
    "        temprat = temp_ratings[temp_ratings[0] == tgt_partic]\n",
    "       # print(temprat)\n",
    "        if len(temprat)==0:\n",
    "            tgt_partic_rat = np.array([[0,0,0]])\n",
    "        else:\n",
    "            tgt_partic_rat = temprat.values\n",
    "            print(tgt_partic_rat)\n",
    "            \n",
    "        \n",
    "        dftemp = pd.read_csv(ftemp, header='infer')\n",
    "        dftemp['subj'] = tgt_partic\n",
    "        \n",
    "        dftemp['hilo'] = ftemp[3:5]\n",
    "        if ftemp[3:5] == 'hi':\n",
    "            dftemp['subjective_rating'] = tgt_partic_rat[0][2]\n",
    "            #print(tgt_partic_rat[0][2])\n",
    "            #print(dftemp)\n",
    "        else:\n",
    "            dftemp['subjective_rating'] = tgt_partic_rat[0][1]\n",
    "        eeg_data.append(dftemp)\n",
    "        \n",
    "eeg_data = pd.concat(eeg_data)\n",
    "#eeg_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dataframe of data\n",
    "#eeg_data[0:2000:50]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
       "       'AF3_Gamma', 'F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma',\n",
       "       'F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma', 'FC5_Delta',\n",
       "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma', 'T7_Delta',\n",
       "       'T7_Theta', 'T7_Alpha', 'T7_Beta', 'T7_Gamma', 'P7_Delta', 'P7_Theta',\n",
       "       'P7_Alpha', 'P7_Beta', 'P7_Gamma', 'O1_Delta', 'O1_Theta', 'O1_Alpha',\n",
       "       'O1_Beta', 'O1_Gamma', 'O2_Delta', 'O2_Theta', 'O2_Alpha', 'O2_Beta',\n",
       "       'O2_Gamma', 'P8_Delta', 'P8_Theta', 'P8_Alpha', 'P8_Beta', 'P8_Gamma',\n",
       "       'T8_Delta', 'T8_Theta', 'T8_Alpha', 'T8_Beta', 'T8_Gamma', 'FC6_Delta',\n",
       "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma', 'F4_Delta',\n",
       "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma', 'F8_Delta', 'F8_Theta',\n",
       "       'F8_Alpha', 'F8_Beta', 'F8_Gamma', 'AF4_Delta', 'AF4_Theta',\n",
       "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma', 'subj', 'hilo',\n",
       "       'subjective_rating'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#list of EEG brainwave features\n",
    "eeg_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#list of all electrodes\n",
    "all_electrodes = ['AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
    "       'AF3_Gamma', 'F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma',\n",
    "       'F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma', 'FC5_Delta',\n",
    "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma', 'T7_Delta',\n",
    "       'T7_Theta', 'T7_Alpha', 'T7_Beta', 'T7_Gamma', 'P7_Delta', 'P7_Theta',\n",
    "       'P7_Alpha', 'P7_Beta', 'P7_Gamma', 'O1_Delta', 'O1_Theta', 'O1_Alpha',\n",
    "       'O1_Beta', 'O1_Gamma', 'O2_Delta', 'O2_Theta', 'O2_Alpha', 'O2_Beta',\n",
    "       'O2_Gamma', 'P8_Delta', 'P8_Theta', 'P8_Alpha', 'P8_Beta', 'P8_Gamma',\n",
    "       'T8_Delta', 'T8_Theta', 'T8_Alpha', 'T8_Beta', 'T8_Gamma', 'FC6_Delta',\n",
    "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma', 'F4_Delta',\n",
    "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma', 'F8_Delta', 'F8_Theta',\n",
    "       'F8_Alpha', 'F8_Beta', 'F8_Gamma', 'AF4_Delta', 'AF4_Theta',\n",
    "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma'];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#channel extraction - significant electrodes\n",
    "frontal_lobe = ['AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
    "       'AF3_Gamma','F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma','FC5_Delta',\n",
    "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma','F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma','F8_Delta', 'F8_Theta',\n",
    "       'F8_Alpha', 'F8_Beta', 'F8_Gamma','FC6_Delta',\n",
    "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma','F4_Delta',\n",
    "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma','AF4_Delta', 'AF4_Theta',\n",
    "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma']\n",
    "frontal_lobe_df = eeg_data[frontal_lobe]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the rest of the electrodes\n",
    "non_frontal_lobe = [i for i in all_electrodes if i not in frontal_lobe]\n",
    "non_frontal_lobe_df = eeg_data[non_frontal_lobe]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#comparing the averages of frontal lobe electrodes vs non frontal\n",
    "\n",
    "np.mean(frontal_lobe_df.mean()) > np.mean(non_frontal_lobe_df.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "fl_mean = frontal_lobe_df.mean()\n",
    "nfl_mean = non_frontal_lobe_df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "eeg_data_numerical = eeg_data[frontal_lobe]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalizing features using StandardScaler\n",
    "scaler = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#transform training data\n",
    "rescaled_eeg_numerical = scaler.fit_transform(eeg_data_numerical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.0571142 , -0.32997759,  0.05649968, ...,  0.03745916,\n",
       "         0.0727878 , -0.24313092],\n",
       "       [ 0.00827255, -0.14266957,  0.89526506, ...,  0.91518676,\n",
       "         0.05338327, -0.21539828],\n",
       "       [ 0.07770959, -0.07086005,  0.54842712, ...,  0.73071781,\n",
       "         0.16470722, -0.01740969],\n",
       "       ...,\n",
       "       [ 0.82490049,  1.36457859,  1.31261763, ...,  1.71925053,\n",
       "         2.06803887,  2.34285035],\n",
       "       [ 1.58642171,  0.5014403 ,  0.56509437, ...,  0.91474496,\n",
       "         0.81849203,  1.06832924],\n",
       "       [ 0.48591053, -0.08548278, -0.01352169, ..., -0.06228728,\n",
       "        -0.00390607,  0.02541921]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rescaled_eeg_numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lo = [0, 1], hi = [1, 0]\n",
    "hilo = eeg_data['hilo']\n",
    "\n",
    "# 1 to 3 = low (1), 4 to 6 = med (2), 7 to 9 hi (3)\n",
    "subjective_ratings = eeg_data['subjective_rating'].values;\n",
    "subjective_ratings_grouped = [ 1 if (1<= i <=3) else 2 if (4 <= i <= 6) else 3 for i in subjective_ratings ]\n",
    "\n",
    "# lo = 1; med = 2; hi=3 // lo = [0, 0, 1], med = [0, 1, 0], hi = [0, 0, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = transformed_dataset = np.array(rescaled_eeg_numerical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.array(subjective_ratings_grouped)\n",
    "y;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((10350, 40), (10350,))"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transformed_dataset.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3450, 3150, 3750)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(y).count(1), list(y).count(2), list(y).count(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "#??KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_parameters = { 'n_neighbors': [2,3,4, 5,6], 'weights': ('uniform', 'distance') } "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_classifier = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_classifier = GridSearchCV(knn_classifier, knn_parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
       "                                            metric='minkowski',\n",
       "                                            metric_params=None, n_jobs=None,\n",
       "                                            n_neighbors=5, p=2,\n",
       "                                            weights='uniform'),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'n_neighbors': [2, 3, 4, 5, 6],\n",
       "                         'weights': ('uniform', 'distance')},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_n_neighbors</th>\n",
       "      <th>param_weights</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.010445</td>\n",
       "      <td>0.001199</td>\n",
       "      <td>0.385071</td>\n",
       "      <td>0.027512</td>\n",
       "      <td>2</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 2, 'weights': 'uniform'}</td>\n",
       "      <td>0.797705</td>\n",
       "      <td>0.772343</td>\n",
       "      <td>0.778382</td>\n",
       "      <td>0.775966</td>\n",
       "      <td>0.801329</td>\n",
       "      <td>0.785145</td>\n",
       "      <td>0.011946</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.009574</td>\n",
       "      <td>0.000171</td>\n",
       "      <td>0.340233</td>\n",
       "      <td>0.021725</td>\n",
       "      <td>2</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 2, 'weights': 'distance'}</td>\n",
       "      <td>0.814010</td>\n",
       "      <td>0.784420</td>\n",
       "      <td>0.812198</td>\n",
       "      <td>0.806159</td>\n",
       "      <td>0.815217</td>\n",
       "      <td>0.806401</td>\n",
       "      <td>0.011423</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.009613</td>\n",
       "      <td>0.000180</td>\n",
       "      <td>0.388388</td>\n",
       "      <td>0.021377</td>\n",
       "      <td>3</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'uniform'}</td>\n",
       "      <td>0.827295</td>\n",
       "      <td>0.791063</td>\n",
       "      <td>0.794082</td>\n",
       "      <td>0.825483</td>\n",
       "      <td>0.811594</td>\n",
       "      <td>0.809903</td>\n",
       "      <td>0.015188</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.009498</td>\n",
       "      <td>0.000269</td>\n",
       "      <td>0.353366</td>\n",
       "      <td>0.023224</td>\n",
       "      <td>3</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'distance'}</td>\n",
       "      <td>0.830918</td>\n",
       "      <td>0.791667</td>\n",
       "      <td>0.795894</td>\n",
       "      <td>0.827295</td>\n",
       "      <td>0.816425</td>\n",
       "      <td>0.812440</td>\n",
       "      <td>0.016021</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.009813</td>\n",
       "      <td>0.000128</td>\n",
       "      <td>0.409125</td>\n",
       "      <td>0.017742</td>\n",
       "      <td>4</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 4, 'weights': 'uniform'}</td>\n",
       "      <td>0.823068</td>\n",
       "      <td>0.793478</td>\n",
       "      <td>0.794686</td>\n",
       "      <td>0.810386</td>\n",
       "      <td>0.811594</td>\n",
       "      <td>0.806643</td>\n",
       "      <td>0.011177</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.009513</td>\n",
       "      <td>0.000211</td>\n",
       "      <td>0.362963</td>\n",
       "      <td>0.020128</td>\n",
       "      <td>4</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 4, 'weights': 'distance'}</td>\n",
       "      <td>0.831522</td>\n",
       "      <td>0.795290</td>\n",
       "      <td>0.810990</td>\n",
       "      <td>0.830314</td>\n",
       "      <td>0.818841</td>\n",
       "      <td>0.817391</td>\n",
       "      <td>0.013403</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.009668</td>\n",
       "      <td>0.000183</td>\n",
       "      <td>0.405151</td>\n",
       "      <td>0.021491</td>\n",
       "      <td>5</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'uniform'}</td>\n",
       "      <td>0.828502</td>\n",
       "      <td>0.796498</td>\n",
       "      <td>0.800725</td>\n",
       "      <td>0.830314</td>\n",
       "      <td>0.811594</td>\n",
       "      <td>0.813527</td>\n",
       "      <td>0.013883</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.009614</td>\n",
       "      <td>0.000089</td>\n",
       "      <td>0.366043</td>\n",
       "      <td>0.022412</td>\n",
       "      <td>5</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'distance'}</td>\n",
       "      <td>0.831522</td>\n",
       "      <td>0.795290</td>\n",
       "      <td>0.810990</td>\n",
       "      <td>0.835749</td>\n",
       "      <td>0.811594</td>\n",
       "      <td>0.817029</td>\n",
       "      <td>0.014826</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.009777</td>\n",
       "      <td>0.000260</td>\n",
       "      <td>0.418511</td>\n",
       "      <td>0.025246</td>\n",
       "      <td>6</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 6, 'weights': 'uniform'}</td>\n",
       "      <td>0.827899</td>\n",
       "      <td>0.799517</td>\n",
       "      <td>0.807971</td>\n",
       "      <td>0.818841</td>\n",
       "      <td>0.812198</td>\n",
       "      <td>0.813285</td>\n",
       "      <td>0.009627</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.009744</td>\n",
       "      <td>0.000186</td>\n",
       "      <td>0.377659</td>\n",
       "      <td>0.022423</td>\n",
       "      <td>6</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 6, 'weights': 'distance'}</td>\n",
       "      <td>0.836957</td>\n",
       "      <td>0.797101</td>\n",
       "      <td>0.817029</td>\n",
       "      <td>0.829710</td>\n",
       "      <td>0.817633</td>\n",
       "      <td>0.819686</td>\n",
       "      <td>0.013565</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       0.010445      0.001199         0.385071        0.027512   \n",
       "1       0.009574      0.000171         0.340233        0.021725   \n",
       "2       0.009613      0.000180         0.388388        0.021377   \n",
       "3       0.009498      0.000269         0.353366        0.023224   \n",
       "4       0.009813      0.000128         0.409125        0.017742   \n",
       "5       0.009513      0.000211         0.362963        0.020128   \n",
       "6       0.009668      0.000183         0.405151        0.021491   \n",
       "7       0.009614      0.000089         0.366043        0.022412   \n",
       "8       0.009777      0.000260         0.418511        0.025246   \n",
       "9       0.009744      0.000186         0.377659        0.022423   \n",
       "\n",
       "  param_n_neighbors param_weights                                     params  \\\n",
       "0                 2       uniform   {'n_neighbors': 2, 'weights': 'uniform'}   \n",
       "1                 2      distance  {'n_neighbors': 2, 'weights': 'distance'}   \n",
       "2                 3       uniform   {'n_neighbors': 3, 'weights': 'uniform'}   \n",
       "3                 3      distance  {'n_neighbors': 3, 'weights': 'distance'}   \n",
       "4                 4       uniform   {'n_neighbors': 4, 'weights': 'uniform'}   \n",
       "5                 4      distance  {'n_neighbors': 4, 'weights': 'distance'}   \n",
       "6                 5       uniform   {'n_neighbors': 5, 'weights': 'uniform'}   \n",
       "7                 5      distance  {'n_neighbors': 5, 'weights': 'distance'}   \n",
       "8                 6       uniform   {'n_neighbors': 6, 'weights': 'uniform'}   \n",
       "9                 6      distance  {'n_neighbors': 6, 'weights': 'distance'}   \n",
       "\n",
       "   split0_test_score  split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0           0.797705           0.772343           0.778382           0.775966   \n",
       "1           0.814010           0.784420           0.812198           0.806159   \n",
       "2           0.827295           0.791063           0.794082           0.825483   \n",
       "3           0.830918           0.791667           0.795894           0.827295   \n",
       "4           0.823068           0.793478           0.794686           0.810386   \n",
       "5           0.831522           0.795290           0.810990           0.830314   \n",
       "6           0.828502           0.796498           0.800725           0.830314   \n",
       "7           0.831522           0.795290           0.810990           0.835749   \n",
       "8           0.827899           0.799517           0.807971           0.818841   \n",
       "9           0.836957           0.797101           0.817029           0.829710   \n",
       "\n",
       "   split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
       "0           0.801329         0.785145        0.011946               10  \n",
       "1           0.815217         0.806401        0.011423                9  \n",
       "2           0.811594         0.809903        0.015188                7  \n",
       "3           0.816425         0.812440        0.016021                6  \n",
       "4           0.811594         0.806643        0.011177                8  \n",
       "5           0.818841         0.817391        0.013403                2  \n",
       "6           0.811594         0.813527        0.013883                4  \n",
       "7           0.811594         0.817029        0.014826                3  \n",
       "8           0.812198         0.813285        0.009627                5  \n",
       "9           0.817633         0.819686        0.013565                1  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(knn_classifier.cv_results_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'n_neighbors': 6, 'weights': 'distance'}, 0.8196859903381644)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_classifier.best_params_, knn_classifier.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.8173913043478261\n"
     ]
    }
   ],
   "source": [
    "y_predict = knn_classifier.predict(X_test)\n",
    "\n",
    "cross = cross_val_score(knn_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[574  63  63]\n",
      " [ 51 493  76]\n",
      " [ 35  83 632]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.87      0.82      0.84       700\n",
      "           2       0.77      0.80      0.78       620\n",
      "           3       0.82      0.84      0.83       750\n",
      "\n",
      "    accuracy                           0.82      2070\n",
      "   macro avg       0.82      0.82      0.82      2070\n",
      "weighted avg       0.82      0.82      0.82      2070\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.8697    0.8200    0.8441       700\n",
      "           2     0.7715    0.7952    0.7832       620\n",
      "           3     0.8197    0.8427    0.8310       750\n",
      "\n",
      "    accuracy                         0.8208      2070\n",
      "   macro avg     0.8203    0.8193    0.8194      2070\n",
      "weighted avg     0.8222    0.8208    0.8211      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, y_predict))\n",
    "print(classification_report(y_test, y_predict))\n",
    "\n",
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(knn_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RANDOM FOREST\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n",
       "                                              class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              max_samples=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators=100, n_jobs=None,\n",
       "                                              oob_score=False,\n",
       "                                              random_state=None, verbose=0,\n",
       "                                              warm_start=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'criterion': ('gini', 'entropy'),\n",
       "                         'max_depth': (1, 3, 5, 7, 9, 10),\n",
       "                         'max_features': ('auto', 'sqrt'),\n",
       "                         'min_samples_split': (2, 4, 6),\n",
       "                         'n_estimators': (1, 10, 30, 50, 70, 90, 100)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest_classifier = RandomForestClassifier()\n",
    "random_forest_classifier.fit(X_train, y_train)\n",
    "\n",
    "y_predict = random_forest_classifier.predict(X_test)\n",
    "\n",
    "rf_parameters = {'n_estimators': (1,10,30,50,70,90, 100), 'criterion':('gini','entropy'),\n",
    "                 'max_depth':(1,3,5,7,9,10), 'max_features':('auto','sqrt'), 'min_samples_split':(2,4,6)}\n",
    "\n",
    "random_forest_classifier = GridSearchCV(random_forest_classifier, rf_parameters)\n",
    "\n",
    "random_forest_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'gini',\n",
       " 'max_depth': 10,\n",
       " 'max_features': 'sqrt',\n",
       " 'min_samples_split': 6,\n",
       " 'n_estimators': 100}"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest_classifier.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.7739130434782607\n"
     ]
    }
   ],
   "source": [
    "cross = cross_val_score(random_forest_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "#??plot_confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.8631    0.8643    0.8637       700\n",
      "           2     0.8356    0.7790    0.8063       620\n",
      "           3     0.8205    0.8653    0.8423       750\n",
      "\n",
      "    accuracy                         0.8391      2070\n",
      "   macro avg     0.8397    0.8362    0.8374      2070\n",
      "weighted avg     0.8394    0.8391    0.8388      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(random_forest_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3450, 3150, 3750)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(y).count(1), list(y).count(2), list(y).count(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.87      0.89      0.88       700\n",
      "           2       0.84      0.77      0.81       620\n",
      "           3       0.82      0.86      0.84       750\n",
      "\n",
      "    accuracy                           0.84      2070\n",
      "   macro avg       0.84      0.84      0.84      2070\n",
      "weighted avg       0.84      0.84      0.84      2070\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_predict))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features=None,\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              presort='deprecated',\n",
       "                                              random_state=None,\n",
       "                                              splitter='best'),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'criterion': ['gini', 'entropy'],\n",
       "                         'max_depth': [1, 2, 3, 4, 5, 6, 7, None]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier = DecisionTreeClassifier()\n",
    "decision_tree_classifier.fit(X_train, y_train)\n",
    "\n",
    "dt_parameters={\"criterion\":[\"gini\",\"entropy\"],\n",
    "              \"max_depth\":[1,2,3,4,5,6,7,None]}\n",
    "\n",
    "y_predict = decision_tree_classifier.predict(X_test)\n",
    "\n",
    "decision_tree_classifier = GridSearchCV(decision_tree_classifier, dt_parameters)\n",
    "\n",
    "decision_tree_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'entropy', 'max_depth': None}"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.6892512077294686\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.7129    0.7271    0.7199       700\n",
      "           2     0.6608    0.6694    0.6651       620\n",
      "           3     0.7047    0.6840    0.6942       750\n",
      "\n",
      "    accuracy                         0.6942      2070\n",
      "   macro avg     0.6928    0.6935    0.6931      2070\n",
      "weighted avg     0.6943    0.6942    0.6942      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_predict = decision_tree_classifier.predict(X_test)\n",
    "cross = cross_val_score(decision_tree_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)\n",
    "\n",
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(decision_tree_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier = DecisionTreeClassifier()\n",
    "decision_tree_classifier.fit(X_train, y_train)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
