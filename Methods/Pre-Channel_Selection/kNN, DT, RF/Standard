{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_dir = os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_ratings = pd.read_csv('ratings.txt', header=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'22_lo.csv'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_dir[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[22  5  8]]\n",
      "[[30  1  8]]\n",
      "[[9 1 7]]\n",
      "[[17  1  9]]\n",
      "[[21  1  6]]\n",
      "[[33  1  5]]\n",
      "[[15  1  6]]\n",
      "[[7 1 5]]\n",
      "[[19  1  5]]\n",
      "[[31  1  6]]\n",
      "[[23  1  5]]\n",
      "[[40  1  5]]\n",
      "[[16  2  9]]\n",
      "[[4 2 5]]\n",
      "[[32  2  7]]\n",
      "[[43  1  7]]\n",
      "[[20  2  8]]\n",
      "[[27  1  4]]\n",
      "[[44  3  8]]\n",
      "[[39  3  8]]\n",
      "[[48  1  7]]\n",
      "[[35  2  4]]\n",
      "[[3 1 5]]\n",
      "[[11  1  5]]\n",
      "[[28  2  7]]\n",
      "[[34  3  9]]\n",
      "[[26  1  8]]\n",
      "[[38  1  5]]\n",
      "[[10  1  6]]\n",
      "[[29  3  6]]\n",
      "[[37  3  8]]\n",
      "[[46  2  7]]\n",
      "[[25  2  4]]\n",
      "[[13  2  7]]\n",
      "[[1 2 8]]\n",
      "[[20  2  8]]\n",
      "[[43  1  7]]\n",
      "[[32  2  7]]\n",
      "[[4 2 5]]\n",
      "[[16  2  9]]\n",
      "[[8 3 7]]\n",
      "[[15  1  6]]\n",
      "[[17  1  9]]\n",
      "[[9 1 7]]\n",
      "[[30  1  8]]\n",
      "[[41  3  6]]\n",
      "[[22  5  8]]\n",
      "[[14  2  7]]\n",
      "[[18  4  7]]\n",
      "[[6 4 7]]\n",
      "[[1 2 8]]\n",
      "[[13  2  7]]\n",
      "[[25  2  4]]\n",
      "[[46  2  7]]\n",
      "[[37  3  8]]\n",
      "[[2 1 5]]\n",
      "[[10  1  6]]\n",
      "[[38  1  5]]\n",
      "[[45  1  8]]\n",
      "[[26  1  8]]\n",
      "[[34  3  9]]\n",
      "[[12  1  6]]\n",
      "[[36  2  8]]\n",
      "[[28  2  7]]\n",
      "[[47  1  8]]\n",
      "[[11  1  5]]\n",
      "[[3 1 5]]\n",
      "[[48  1  7]]\n",
      "[[44  3  8]]\n"
     ]
    }
   ],
   "source": [
    "#dataframe of brainwave features\n",
    "eeg_data = []\n",
    "\n",
    "for ftemp in current_dir:\n",
    "    if ftemp[-3:] == 'csv':\n",
    "        tgt_partic = int(ftemp[0:2])\n",
    "        #print(tgt_partic)\n",
    "        temprat = temp_ratings[temp_ratings[0] == tgt_partic]\n",
    "       # print(temprat)\n",
    "        if len(temprat)==0:\n",
    "            tgt_partic_rat = np.array([[0,0,0]])\n",
    "        else:\n",
    "            tgt_partic_rat = temprat.values\n",
    "            print(tgt_partic_rat)\n",
    "            \n",
    "        \n",
    "        dftemp = pd.read_csv(ftemp, header='infer')\n",
    "        dftemp['subj'] = tgt_partic\n",
    "        \n",
    "        dftemp['hilo'] = ftemp[3:5]\n",
    "        if ftemp[3:5] == 'hi':\n",
    "            dftemp['subjective_rating'] = tgt_partic_rat[0][2]\n",
    "            #print(tgt_partic_rat[0][2])\n",
    "            #print(dftemp)\n",
    "        else:\n",
    "            dftemp['subjective_rating'] = tgt_partic_rat[0][1]\n",
    "        eeg_data.append(dftemp)\n",
    "        \n",
    "eeg_data = pd.concat(eeg_data)\n",
    "#eeg_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dataframe of data\n",
    "#eeg_data[0:2000:50]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
       "       'AF3_Gamma', 'F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma',\n",
       "       'F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma', 'FC5_Delta',\n",
       "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma', 'T7_Delta',\n",
       "       'T7_Theta', 'T7_Alpha', 'T7_Beta', 'T7_Gamma', 'P7_Delta', 'P7_Theta',\n",
       "       'P7_Alpha', 'P7_Beta', 'P7_Gamma', 'O1_Delta', 'O1_Theta', 'O1_Alpha',\n",
       "       'O1_Beta', 'O1_Gamma', 'O2_Delta', 'O2_Theta', 'O2_Alpha', 'O2_Beta',\n",
       "       'O2_Gamma', 'P8_Delta', 'P8_Theta', 'P8_Alpha', 'P8_Beta', 'P8_Gamma',\n",
       "       'T8_Delta', 'T8_Theta', 'T8_Alpha', 'T8_Beta', 'T8_Gamma', 'FC6_Delta',\n",
       "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma', 'F4_Delta',\n",
       "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma', 'F8_Delta', 'F8_Theta',\n",
       "       'F8_Alpha', 'F8_Beta', 'F8_Gamma', 'AF4_Delta', 'AF4_Theta',\n",
       "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma', 'subj', 'hilo',\n",
       "       'subjective_rating'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#list of EEG brainwave features\n",
    "eeg_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#list of all electrodes\n",
    "all_electrodes = ['AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
    "       'AF3_Gamma', 'F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma',\n",
    "       'F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma', 'FC5_Delta',\n",
    "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma', 'T7_Delta',\n",
    "       'T7_Theta', 'T7_Alpha', 'T7_Beta', 'T7_Gamma', 'P7_Delta', 'P7_Theta',\n",
    "       'P7_Alpha', 'P7_Beta', 'P7_Gamma', 'O1_Delta', 'O1_Theta', 'O1_Alpha',\n",
    "       'O1_Beta', 'O1_Gamma', 'O2_Delta', 'O2_Theta', 'O2_Alpha', 'O2_Beta',\n",
    "       'O2_Gamma', 'P8_Delta', 'P8_Theta', 'P8_Alpha', 'P8_Beta', 'P8_Gamma',\n",
    "       'T8_Delta', 'T8_Theta', 'T8_Alpha', 'T8_Beta', 'T8_Gamma', 'FC6_Delta',\n",
    "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma', 'F4_Delta',\n",
    "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma', 'F8_Delta', 'F8_Theta',\n",
    "       'F8_Alpha', 'F8_Beta', 'F8_Gamma', 'AF4_Delta', 'AF4_Theta',\n",
    "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma'];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#channel extraction - significant electrodes\n",
    "frontal_lobe = ['AF3_Delta', 'AF3_Theta', 'AF3_Alpha', 'AF3_Beta',\n",
    "       'AF3_Gamma','F3_Delta', 'F3_Theta', 'F3_Alpha', 'F3_Beta', 'F3_Gamma','FC5_Delta',\n",
    "       'FC5_Theta', 'FC5_Alpha', 'FC5_Beta', 'FC5_Gamma','F7_Delta', 'F7_Theta', 'F7_Alpha', 'F7_Beta', 'F7_Gamma','F8_Delta', 'F8_Theta',\n",
    "       'F8_Alpha', 'F8_Beta', 'F8_Gamma','FC6_Delta',\n",
    "       'FC6_Theta', 'FC6_Alpha', 'FC6_Beta', 'FC6_Gamma','F4_Delta',\n",
    "       'F4_Theta', 'F4_Alpha', 'F4_Beta', 'F4_Gamma','AF4_Delta', 'AF4_Theta',\n",
    "       'AF4_Alpha', 'AF4_Beta', 'AF4_Gamma']\n",
    "frontal_lobe_df = eeg_data[frontal_lobe]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the rest of the electrodes\n",
    "non_frontal_lobe = [i for i in all_electrodes if i not in frontal_lobe]\n",
    "non_frontal_lobe_df = eeg_data[non_frontal_lobe]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#comparing the averages of frontal lobe electrodes vs non frontal\n",
    "\n",
    "np.mean(frontal_lobe_df.mean()) > np.mean(non_frontal_lobe_df.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "fl_mean = frontal_lobe_df.mean()\n",
    "nfl_mean = non_frontal_lobe_df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "eeg_data_numerical = eeg_data[all_electrodes]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalizing features using StandardScaler\n",
    "scaler = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#transform training data\n",
    "rescaled_eeg_numerical = scaler.fit_transform(eeg_data_numerical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.0571142 , -0.32997759,  0.05649968, ...,  0.03745916,\n",
       "         0.0727878 , -0.24313092],\n",
       "       [ 0.00827255, -0.14266957,  0.89526506, ...,  0.91518676,\n",
       "         0.05338327, -0.21539828],\n",
       "       [ 0.07770959, -0.07086005,  0.54842712, ...,  0.73071781,\n",
       "         0.16470722, -0.01740969],\n",
       "       ...,\n",
       "       [ 0.82490049,  1.36457859,  1.31261763, ...,  1.71925053,\n",
       "         2.06803887,  2.34285035],\n",
       "       [ 1.58642171,  0.5014403 ,  0.56509437, ...,  0.91474496,\n",
       "         0.81849203,  1.06832924],\n",
       "       [ 0.48591053, -0.08548278, -0.01352169, ..., -0.06228728,\n",
       "        -0.00390607,  0.02541921]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rescaled_eeg_numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lo = [0, 1], hi = [1, 0]\n",
    "hilo = eeg_data['hilo']\n",
    "\n",
    "#hilo_encoded = [ [0, 1] if i=='lo' else [1, 0] for i in hilo]\n",
    "\n",
    "# 1 to 3 = low (1), 4 to 6 = med (2), 7 to 9 hi (3)\n",
    "subjective_ratings = eeg_data['subjective_rating'].values;\n",
    "subjective_ratings_grouped = [ 1 if (1<= i <=3) else 2 if (4 <= i <= 6) else 3 for i in subjective_ratings ]\n",
    "\n",
    "# lo = 1; med = 2; hi=3 // lo = [0, 0, 1], med = [0, 1, 0], hi = [0, 0, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = transformed_dataset = np.array(rescaled_eeg_numerical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.array(subjective_ratings_grouped)\n",
    "y;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((10350, 70), (10350,))"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transformed_dataset.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3450, 3150, 3750)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(y).count(1), list(y).count(2), list(y).count(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "#??KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_parameters = { 'n_neighbors': [2,3,4, 5,6], 'weights': ('uniform', 'distance') } "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_classifier = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_classifier = GridSearchCV(knn_classifier, knn_parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
       "                                            metric='minkowski',\n",
       "                                            metric_params=None, n_jobs=None,\n",
       "                                            n_neighbors=5, p=2,\n",
       "                                            weights='uniform'),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'n_neighbors': [2, 3, 4, 5, 6],\n",
       "                         'weights': ('uniform', 'distance')},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_n_neighbors</th>\n",
       "      <th>param_weights</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.041028</td>\n",
       "      <td>0.003246</td>\n",
       "      <td>1.949608</td>\n",
       "      <td>0.080594</td>\n",
       "      <td>2</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 2, 'weights': 'uniform'}</td>\n",
       "      <td>0.853865</td>\n",
       "      <td>0.833937</td>\n",
       "      <td>0.851449</td>\n",
       "      <td>0.849034</td>\n",
       "      <td>0.858696</td>\n",
       "      <td>0.849396</td>\n",
       "      <td>0.008364</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.037812</td>\n",
       "      <td>0.003541</td>\n",
       "      <td>1.804779</td>\n",
       "      <td>0.104129</td>\n",
       "      <td>2</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 2, 'weights': 'distance'}</td>\n",
       "      <td>0.864734</td>\n",
       "      <td>0.849034</td>\n",
       "      <td>0.861715</td>\n",
       "      <td>0.863527</td>\n",
       "      <td>0.873792</td>\n",
       "      <td>0.862560</td>\n",
       "      <td>0.007944</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.036210</td>\n",
       "      <td>0.005252</td>\n",
       "      <td>1.955013</td>\n",
       "      <td>0.115641</td>\n",
       "      <td>3</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'uniform'}</td>\n",
       "      <td>0.873792</td>\n",
       "      <td>0.849034</td>\n",
       "      <td>0.866546</td>\n",
       "      <td>0.874396</td>\n",
       "      <td>0.867754</td>\n",
       "      <td>0.866304</td>\n",
       "      <td>0.009187</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.036739</td>\n",
       "      <td>0.003685</td>\n",
       "      <td>1.828040</td>\n",
       "      <td>0.071535</td>\n",
       "      <td>3</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'distance'}</td>\n",
       "      <td>0.876812</td>\n",
       "      <td>0.856280</td>\n",
       "      <td>0.871377</td>\n",
       "      <td>0.875604</td>\n",
       "      <td>0.870773</td>\n",
       "      <td>0.870169</td>\n",
       "      <td>0.007326</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.042046</td>\n",
       "      <td>0.007219</td>\n",
       "      <td>2.006196</td>\n",
       "      <td>0.103879</td>\n",
       "      <td>4</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 4, 'weights': 'uniform'}</td>\n",
       "      <td>0.864734</td>\n",
       "      <td>0.856884</td>\n",
       "      <td>0.859300</td>\n",
       "      <td>0.865338</td>\n",
       "      <td>0.864734</td>\n",
       "      <td>0.862198</td>\n",
       "      <td>0.003446</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.040919</td>\n",
       "      <td>0.002992</td>\n",
       "      <td>1.919830</td>\n",
       "      <td>0.090498</td>\n",
       "      <td>4</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 4, 'weights': 'distance'}</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.856884</td>\n",
       "      <td>0.869565</td>\n",
       "      <td>0.874396</td>\n",
       "      <td>0.871377</td>\n",
       "      <td>0.869444</td>\n",
       "      <td>0.006586</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.037237</td>\n",
       "      <td>0.004431</td>\n",
       "      <td>1.938422</td>\n",
       "      <td>0.032110</td>\n",
       "      <td>5</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'uniform'}</td>\n",
       "      <td>0.874396</td>\n",
       "      <td>0.849638</td>\n",
       "      <td>0.855676</td>\n",
       "      <td>0.870169</td>\n",
       "      <td>0.871981</td>\n",
       "      <td>0.864372</td>\n",
       "      <td>0.009846</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.033642</td>\n",
       "      <td>0.004495</td>\n",
       "      <td>1.816524</td>\n",
       "      <td>0.072101</td>\n",
       "      <td>5</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'distance'}</td>\n",
       "      <td>0.876812</td>\n",
       "      <td>0.853261</td>\n",
       "      <td>0.859300</td>\n",
       "      <td>0.873188</td>\n",
       "      <td>0.874396</td>\n",
       "      <td>0.867391</td>\n",
       "      <td>0.009344</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.036922</td>\n",
       "      <td>0.004061</td>\n",
       "      <td>1.909774</td>\n",
       "      <td>0.066947</td>\n",
       "      <td>6</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 6, 'weights': 'uniform'}</td>\n",
       "      <td>0.874396</td>\n",
       "      <td>0.852053</td>\n",
       "      <td>0.851449</td>\n",
       "      <td>0.871377</td>\n",
       "      <td>0.867150</td>\n",
       "      <td>0.863285</td>\n",
       "      <td>0.009696</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.033305</td>\n",
       "      <td>0.000820</td>\n",
       "      <td>1.829227</td>\n",
       "      <td>0.068517</td>\n",
       "      <td>6</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 6, 'weights': 'distance'}</td>\n",
       "      <td>0.881643</td>\n",
       "      <td>0.856280</td>\n",
       "      <td>0.865942</td>\n",
       "      <td>0.869565</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.869686</td>\n",
       "      <td>0.008543</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       0.041028      0.003246         1.949608        0.080594   \n",
       "1       0.037812      0.003541         1.804779        0.104129   \n",
       "2       0.036210      0.005252         1.955013        0.115641   \n",
       "3       0.036739      0.003685         1.828040        0.071535   \n",
       "4       0.042046      0.007219         2.006196        0.103879   \n",
       "5       0.040919      0.002992         1.919830        0.090498   \n",
       "6       0.037237      0.004431         1.938422        0.032110   \n",
       "7       0.033642      0.004495         1.816524        0.072101   \n",
       "8       0.036922      0.004061         1.909774        0.066947   \n",
       "9       0.033305      0.000820         1.829227        0.068517   \n",
       "\n",
       "  param_n_neighbors param_weights                                     params  \\\n",
       "0                 2       uniform   {'n_neighbors': 2, 'weights': 'uniform'}   \n",
       "1                 2      distance  {'n_neighbors': 2, 'weights': 'distance'}   \n",
       "2                 3       uniform   {'n_neighbors': 3, 'weights': 'uniform'}   \n",
       "3                 3      distance  {'n_neighbors': 3, 'weights': 'distance'}   \n",
       "4                 4       uniform   {'n_neighbors': 4, 'weights': 'uniform'}   \n",
       "5                 4      distance  {'n_neighbors': 4, 'weights': 'distance'}   \n",
       "6                 5       uniform   {'n_neighbors': 5, 'weights': 'uniform'}   \n",
       "7                 5      distance  {'n_neighbors': 5, 'weights': 'distance'}   \n",
       "8                 6       uniform   {'n_neighbors': 6, 'weights': 'uniform'}   \n",
       "9                 6      distance  {'n_neighbors': 6, 'weights': 'distance'}   \n",
       "\n",
       "   split0_test_score  split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0           0.853865           0.833937           0.851449           0.849034   \n",
       "1           0.864734           0.849034           0.861715           0.863527   \n",
       "2           0.873792           0.849034           0.866546           0.874396   \n",
       "3           0.876812           0.856280           0.871377           0.875604   \n",
       "4           0.864734           0.856884           0.859300           0.865338   \n",
       "5           0.875000           0.856884           0.869565           0.874396   \n",
       "6           0.874396           0.849638           0.855676           0.870169   \n",
       "7           0.876812           0.853261           0.859300           0.873188   \n",
       "8           0.874396           0.852053           0.851449           0.871377   \n",
       "9           0.881643           0.856280           0.865942           0.869565   \n",
       "\n",
       "   split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
       "0           0.858696         0.849396        0.008364               10  \n",
       "1           0.873792         0.862560        0.007944                8  \n",
       "2           0.867754         0.866304        0.009187                5  \n",
       "3           0.870773         0.870169        0.007326                1  \n",
       "4           0.864734         0.862198        0.003446                9  \n",
       "5           0.871377         0.869444        0.006586                3  \n",
       "6           0.871981         0.864372        0.009846                6  \n",
       "7           0.874396         0.867391        0.009344                4  \n",
       "8           0.867150         0.863285        0.009696                7  \n",
       "9           0.875000         0.869686        0.008543                2  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(knn_classifier.cv_results_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'n_neighbors': 3, 'weights': 'distance'}, 0.8701690821256038)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_classifier.best_params_, knn_classifier.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.8694444444444445\n"
     ]
    }
   ],
   "source": [
    "y_predict = knn_classifier.predict(X_test)\n",
    "\n",
    "cross = cross_val_score(knn_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[620  43  37]\n",
      " [ 41 522  57]\n",
      " [ 21  58 671]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.9091    0.8857    0.8973       700\n",
      "           2     0.8379    0.8419    0.8399       620\n",
      "           3     0.8771    0.8947    0.8858       750\n",
      "\n",
      "    accuracy                         0.8758      2070\n",
      "   macro avg     0.8747    0.8741    0.8743      2070\n",
      "weighted avg     0.8762    0.8758    0.8759      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, y_predict))\n",
    "\n",
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(knn_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RANDOM FOREST\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n",
       "                                              class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features='auto',\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              max_samples=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              n_estimators=100, n_jobs=None,\n",
       "                                              oob_score=False,\n",
       "                                              random_state=None, verbose=0,\n",
       "                                              warm_start=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'criterion': ('gini', 'entropy'),\n",
       "                         'max_depth': (1, 3, 5, 7, 9, 10),\n",
       "                         'max_features': ('auto', 'sqrt'),\n",
       "                         'min_samples_split': (2, 4, 6),\n",
       "                         'n_estimators': (1, 10, 30, 50, 70, 90, 100)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest_classifier = RandomForestClassifier()\n",
    "random_forest_classifier.fit(X_train, y_train)\n",
    "\n",
    "y_predict = random_forest_classifier.predict(X_test)\n",
    "\n",
    "rf_parameters = {'n_estimators': (1,10,30,50,70,90, 100), 'criterion':('gini','entropy'),\n",
    "                 'max_depth':(1,3,5,7,9,10), 'max_features':('auto','sqrt'), 'min_samples_split':(2,4,6)}\n",
    "\n",
    "random_forest_classifier = GridSearchCV(random_forest_classifier, rf_parameters)\n",
    "\n",
    "random_forest_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='entropy', max_depth=10, max_features='sqrt',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest_classifier.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'entropy',\n",
       " 'max_depth': 10,\n",
       " 'max_features': 'sqrt',\n",
       " 'min_samples_split': 2,\n",
       " 'n_estimators': 100}"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest_classifier.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.8327294685990339\n"
     ]
    }
   ],
   "source": [
    "cross = cross_val_score(random_forest_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "#??plot_confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[653  23  24]\n",
      " [ 22 535  63]\n",
      " [ 27  41 682]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.9302    0.9329    0.9315       700\n",
      "           2     0.8932    0.8629    0.8778       620\n",
      "           3     0.8869    0.9093    0.8980       750\n",
      "\n",
      "    accuracy                         0.9034      2070\n",
      "   macro avg     0.9034    0.9017    0.9024      2070\n",
      "weighted avg     0.9034    0.9034    0.9033      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, y_predict))\n",
    "\n",
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(random_forest_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "disp = plot_confusion_matrix(random_forest_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues, values_format='.5g')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x1a1eaa4c10>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(random_forest_classifier, X_train, y_train,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues, values_format='.5g')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3450, 3150, 3750)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(y).count(1), list(y).count(2), list(y).count(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.93      0.93      0.93       700\n",
      "           2       0.88      0.86      0.87       620\n",
      "           3       0.88      0.91      0.89       750\n",
      "\n",
      "    accuracy                           0.90      2070\n",
      "   macro avg       0.90      0.90      0.90      2070\n",
      "weighted avg       0.90      0.90      0.90      2070\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_predict))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,\n",
       "                                              criterion='gini', max_depth=None,\n",
       "                                              max_features=None,\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              presort='deprecated',\n",
       "                                              random_state=None,\n",
       "                                              splitter='best'),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'criterion': ['gini', 'entropy'],\n",
       "                         'max_depth': [1, 2, 3, 4, 5, 6, 7, None]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier = DecisionTreeClassifier()\n",
    "decision_tree_classifier.fit(X_train, y_train)\n",
    "\n",
    "dt_parameters={\"criterion\":[\"gini\",\"entropy\"],\n",
    "              \"max_depth\":[1,2,3,4,5,6,7,None]}\n",
    "\n",
    "y_predict = decision_tree_classifier.predict(X_test)\n",
    "\n",
    "decision_tree_classifier = GridSearchCV(decision_tree_classifier, dt_parameters)\n",
    "\n",
    "decision_tree_classifier.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'entropy', 'max_depth': None}"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cross val score is: 0.7382850241545894\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1     0.8009    0.7986    0.7997       700\n",
      "           2     0.7058    0.7274    0.7164       620\n",
      "           3     0.7722    0.7547    0.7633       750\n",
      "\n",
      "    accuracy                         0.7614      2070\n",
      "   macro avg     0.7596    0.7602    0.7598      2070\n",
      "weighted avg     0.7620    0.7614    0.7616      2070\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAATgAAAEGCAYAAADxD4m3AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3dd3wVVdrA8d+ThB5IAiEBQhWQIkgVUFRYEBYQsaIiKlZWF1dhRQWxlxVBwe6uDbFhoby6iCUiRRCQIogQaa7UGBIggdBCkuf9405iICG5V3Jz75083/3M596Ze+bMmTH7cM6cmXNEVTHGGDcKC3QBjDHGXyzAGWNcywKcMca1LMAZY1zLApwxxrUiAl2AgiSiikqlGoEuRtBq37JBoIsQ9CTQBQhyW7f+Rlpa2ildpvAajVSzD3uVVg+nfqWq/U7leKciuAJcpRpUajUk0MUIWgsXTwp0EYJeRLg1SorTvWvnU85Dsw9TqcWVXqU9svrl2FM+4CkIqgBnjAkFAhIa/5BYgDPG+EaAsPBAl8IrFuCMMb6T0LjbaQHOGOMja6IaY9zManDGGFcSrAZnjHErsRqcMcbFrBfVGONO1slgjHErwZqoxhgXsxqcMcadrIlqjHErAcKtk8EY41Z2D84Y407WRDXGuJnV4IwxrmU1OGOMK4m9qmWMcTN7VcsY407WyWCMcTNrohpjXMnGgzPGuJc1UY0xbhYinQyhEYaNMcEl71GRkpYSs5HfRGStiKwWkRXOtpoikigim5zPGGe7iMgLIrJZRH4SkY4l5W8BzhjjG3GaqN4s3vmLqrZX1c7O+hhgrqo2B+Y66wD9gebOMhx4taSMLcAZY3xXSjW4k7gYmOp8nwpcUmD7O+qxFIgWkbrFZWQBzhjjMxHxagFiRWRFgWX4CVkp8LWIrCzwW7yqJgM4n3HO9gRge4F9dzjbTso6GYwxPvGMWO517SytQNOzKN1VdZeIxAGJIvJLCYc+kRZ3cAtwxhjfiCBhpfOgr6rucj53i8gsoAuQIiJ1VTXZaYLudpLvABoU2L0+sKu4/MtNgFsz6yEyDx4hJ1fJzsmh142TuO+Wflw/qBt70g8C8Pirs0lckkSFiHAmj7mSDi0bkKvKmMmzWLxqc6E8o2tU5a0nhtGwbk22Je/lxnFvk3HgcFmfWqnbvDWFWx54O39968407hs+gP0HDvPuZ0uoFR0JwLjbB9LnnDMK7T93yXrGTZ5JTm4u1w46m7uu71NWRS8zGQcOcecTH5C0JRkRePHBoXQ58zRe+2g+r3+8kIjwMPqc24bH7ryk0L7ffL+esc9OJyc3l+suPodRN/QNwBmcGh9qcMXlUQ0IU9UDzve+wGPAZ8AwYLzz+amzy2fAHSLyIdAVyMhryp6M3wKciLwFDAR2q2obfx3HFxeNeJm9GQeP2/bqhwt46YN5x20bdvHZAHS/dgKxMZF8Mvlv9LpxEqrH14ZHXd+bhcs38ty7cxl5XW9GXX8Bj7z8X/+eRBlo1iie+e/eB0BOTi5tL3qQC3u0Y9rspdx2dU9GDO190n1zcnIZ88wnfPLCCOrFRdP3xmfod14bWjQp9l5wyBnz7HR6n92aqU/fQtaxbA4fyeK7FRuZs2Ati6aNpVLFCqTuPVBov5ycXO6Z8DGzXrqDevHR9Bo2kf7nt6XlaaF1fUojwAHxwCwnrwjgA1X9UkSWAx+LyM3ANmCwk34OMADYDBwCbizpAP7sZHgb6OfH/P2mRZN4Fq7YCEDavkwyDhymQ6sGhdL1P68t0+YsB2DanOUMOL9tmZazLCxcsYHGCbE0qFvTq/Sr1m+lcf3aNE6IpWKFCC7p05EvFq71cynL1v7Mw3z/4xauc/4hrFghgqjqVXlrxneMHNaHShUrAFC7ZvVC+65c9xunNYilcX3P9bmsT0fmLPipTMtfGnzoZDgpVf1VVds5yxmq+qSzfY+q9lbV5s7nXme7quoIVW2qqm1VdUVJ5fRbgFPVhcBef+XvK1Vl5gu3Me/tu/NraAC3Dj6PRe/dy4vjhhBVvQoAP2/aRf/z2hIeHkbDujVp37IBCfHRhfKMq1mdlD37AUjZs5/aMZFlczJlaFbiKi7r2yl//c1PvqPH0PHc+cT7pO8/VCh9cmo6CXF/XKt6cdEkp2aUSVnLytade4iNjmTEo+9xvnMtDh4+yuatu1myegsX3DCRC4c/x6p1Wwvtm5yaQUJ8TP56vfiY0Ls+4sMSYOXmMZF+w5+n57BnGTzqP9xyxbmc0/403pq5iA6XP855100kZU8GTzj3S96bvYxdu9OZN+Vunhp1KT+s/R/Z2bkBPoOyl3Usm6+++5lBvdoDcMNl57J8xkPMe/de4mtF8dALswrto0X0aUkw/KWXouycHNZs2M5NV5zHwvfHULVyJZ57O5HsnFzSDxwiccpoHrvrEm68/61CtzVOXIeQGZgjn+Bd7a2UmrGnJOABTkSG5z0jo9n+u0H/e5qnppW2L5PZC9bSsXUjUvdmkpurqCpTP11Kp9YNAc99knHP/x/nXz+Rofe+SVRkFX7dnlooz917DxBfqwYA8bVqkLov02/lD4S5S9ZzZov6xDnnGFerBuHhYYSFhXHdxWfz4/pthfapFxfNzt3p+eu7dqdTp3aNMitzWagXF0O9uGg6t2kMwKDe7VmzYTsJcdFc9Jd2iAidzmhMmAh70jNP2DeanSn78td3peyjTmxUWRa/VISFhXm1BFrAS6Cqr6lqZ1XtLBFV/HKMqpUrElm1Uv73Xl1akPRrcn5wAhjYoy1Jv3o6ZKpUqkDVyhUB6NnldLJzctnwW0qhfL/87meGDDgLgCEDzuKL79x1r2nm16u4tEDz9Pe0P5pScxb8VOSN8Q6tGvK/7als3bWHrGPZ/F/iKvqd5657k/GxNUiIj2GT8zexcPkGWjSpw4CeZ7Jwuefe7eatKWQdy87vcc7TsXUjtmxLZevONLKOZTMzcRX9zz+zzM/hVIVKDa5cPCZSu2Z13nv6JgDCw8OY8fUq5i79hX8/PJS2zRNQYFvyXkaN/xiA2JrVmfHcbeSqkpyazm2Pvpef1/P3X8WUmd+z+pftTH7nG6Y8eQPXDurGjt/3ccO4twNwdv5x6EgWC374hWfHXJW/7bGXPuXnTTsRhAZ1a/KM89vvqRmM/Nc0Ppx8GxER4Tw1+gquvOsVcnNzGTKwW8j1EHpjwujBDH/obbKO5dA4IZaXH7qWqlUqcsdj73P2VU9SsUI4rz5yHSJCcmo6dz7xAZ88/3ciIsKZcO+VXH7ny+TkKEMHdaNV0xC7PkFyf80bUtQ9gVLJWGQa0BOIBVKAh1X1zeL2CasWr5VaDfFLedwgdfGkQBch6EWEB7xREtS6d+3MypUrTik8RcSeptED/+VV2j1Th6ws4U0Gv/JbDU5VLVIZ40J5nQyhoFw0UY0xpau0XtXyNwtwxhjfSKm9yeB3FuCMMT6zAGeMcS0LcMYYV7JOBmOMu4VGfLMAZ4zxkRAUr2F5wwKcMcZn1kQ1xrhXaMQ3C3DGGN9ZDc4Y40rBMlKINyzAGWN8ZgHOGONa9i6qMca1rAZnjHEne9neGONWQuhMlGMBzhjjI+tFNca4WJh1MhhjXEmsiWqMcSnBanDGGBezGpwxxrWsk8EY4052D84Y41aC2ICXxhj3shqcMca17B6cMcadQugeXGg0pI0xQcPzLqp4tXiVn0i4iPwoIrOd9SYiskxENonIRyJS0dleyVnf7PzeuKS8LcAZY3wm4t3ipbuApALrTwOTVbU5sA+42dl+M7BPVZsBk510xbIAZ4zxWViYeLWURETqAxcCbzjrAvQCpjtJpgKXON8vdtZxfu8tJVQTLcAZY3wjpdpEfQ64F8h11msB6aqa7azvABKc7wnAdgDn9wwn/UkFVSdD+5YNWLxkcqCLEbROH/VZoIsQ9FY+NSDQRQhqOaqnnIeP48HFisiKAuuvqeprACIyENitqitFpGeB7E+kXvxWpKAKcMaYUODTeHBpqtr5JL91BwaJyACgMlADT40uWkQinFpafWCXk34H0ADYISIRQBSwt7iDWxPVGOOz0uhkUNWxqlpfVRsDVwPfqupQYB5whZNsGPCp8/0zZx3n929Vi6+SWg3OGOMb8ftwSfcBH4rIE8CPwJvO9jeBd0VkM56a29UlZWQBzhjjk7zn4EqTqs4H5jvffwW6FJHmCDDYl3wtwBljfGavahljXCtE4psFOGOM76wGZ4xxpxB62d4CnDHGJ54BL0MjwlmAM8b4LCxEqnAW4IwxPguR+GYBzhjjGxEXdDKISI3idlTV/aVfHGNMKAiRW3DF1uDW4XlTv+Cp5K0r0NCP5TLGBLGQ72RQ1QZlWRBjTGgQPD2pocCr0URE5GoRud/5Xl9EOvm3WMaYYBYm3i2BVmKAE5GXgL8A1zmbDgH/9mehjDFBzMvRfIOhI8KbXtRzVLWjiPwIoKp782a5McaUT0EQu7ziTYA7JiJhOEMDi0gt/hg/3RhTzgjuetD3ZWAGUFtEHgWuBB71a6mMMUEt5HtR86jqOyKyErjA2TRYVX/2b7GMMcHKxzlPA8rbNxnCgWN4mqk2j4Mx5VyoNFG96UUdB0wD6uGZ4eYDERnr74IZY4KXeLkEmjc1uGuBTqp6CEBEngRWAk/5s2DGmOAVDI+AeMObALf1hHQRwK/+KY4xJth5elEDXQrvFPey/WQ899wOAetE5CtnvS+wqGyKZ4wJOuKOAS/zekrXAZ8X2L7Uf8UxxoSCkG+iquqbJ/vNGFN+uaKJmkdEmgJPAq2BynnbVfV0P5bLGBPEQqUG580zbW8DU/AE7v7Ax8CHfiyTMSbIhcpjIt4EuKqq+hWAqm5R1QfwjC5ijCmHRCA8TLxaAs2bx0SOiqc+ukVEbgN2AnH+LZb/ZRw4xJ1PTuOXLbtAhBcfGEqVyhX45/iPOHr0GBHhYUy870o6ndG40L7TZi/j2SlfAXD3jX9lyMCuZVx6/wgTmHV3D1IyjjD89WU8fU0Hzmpai8wj2QDc98Eqknbu57S4SMZf04Ez6kcx6fMk3py3pcj86tesynPDOhNVtQLrdmRwz3srOZajZXlKpWr0+Gl8+/16asVEkjj1PgDS9x9kxCPvsCN5L/Xr1uSVR4cRVb0qm7emMHr8NNZt3MHoWy7kb0OKrhNs27WHfzz6Dun7D9Hm9PpMfmAoFSsE/1QpbmqijgIigTuB7sCtwE0l7SQiDURknogkicg6Ebnr1IpausY+O4Pe3Vqx7JMH+e79MbRoEs/DL37Kvbf0Y+H7Yxj7twt55MVPC+23L+MgE974gsS37uabKaOZ8MYXpO8/FIAzKH3DejRlS0rmcdsmfLaOQRPnM2jifJJ2eqbhSD+UxeMz1vLGt0UHtjz3XNSaKfO30OfJuew/lMXgbo38VvayMLhfF6ZOHH7ctlfen0v3js1ZMG0c3Ts255X35gIQXaMqj955GbdeXXxjZ/x//svNV/ZgwbRxRFWvwkefL/Nb+UtT3vuoJS2BVmKAU9VlqnpAVbep6nWqOkhVF3uRdzZwt6q2AroBI0Sk9akWuDTszzzM9z9u5rqLzwagYoUIoqpXRYADB4/kp6kTG1Vo32+XJtGza0tioqoRXaMqPbu2ZO6S9WVZfL+oE1WZnq3j+Xjp1hLT7s3MYu32dLJzix81q1vzWL5cswuAmcu3c0HbuqVS1kDp2r4p0TWqHbctcdHPXN7vLAAu73cWXy9aC0BsTHXatWpIhfDwk+anqny/ajMDerRz9u/C19+t9VPpS48ghIl3S6AV96DvLJwx4IqiqpcVl7GqJgPJzvcDIpIEJAABjwZbd+0hNiaSOx57j5837aJdywY8dffl/Oufl3PFna/w0PP/h6ry5Rv/LLTvrtQMEuKi89frxUWzKzWjLIvvF+MubcuEz9ZRrfLxfxKjLmzNiL+2YMnGNJ7573qycrwbCjCmWkUOHD5GTq7nT+j39MPER1UuYa/Qk7bvAPHOP4TxsVGk7cssYY8/7Ms4SI3IKkREeIJg3dpR/J4WAn9LQVI780Zxjf2XSusgItIY6AAUqn+LyHBgOECDhmUzUVd2di5rNuxg/OjBdG7TmDHPTue5qYkcyDzCk6MuY1Cv9sxKXMWdT7zPrJf/cdy+qoVjfqj8xz6Zv7SOZ0/mUdbtyKBLs1r525+ZvZ7U/UepGB7G41e1Y/gFzXjpq41e5VnUJSni0pVrRV2OUJnMJeTvwanq3OIWbw8gIpF4BswcWdRcqqr6mqp2VtXOsbG1/9xZ+KheXDT14qLp3KYxABf3as9PG7Yz7fNlXPQXT3Phkgs6sHL9tkL7JsRFs3N3ev76rt3p1C2iKRtKOp5Wk95t6jDvoT48d31nujWP5ZlrO5K6/ygAWTm5zPhhG2c2jPE6z70Hs6hepUJ+T1qd6Crs3n/EL+UPpNiY6qQ4ta6UtAxiYyK93rdmVDX2Zx4mOzsHgOTUDOJji52OOCgIEC7i1RJofh3bTUQq4Alu76vqTH8eyxfxsTVIiItm09YUABYs30iLJnWpUzuKxas2A7Bw+UaaNigccHt1a8W8pUmk7z9E+v5DzFuaRK9urcq0/KXt2dlJnPfI1/zlsURGvrOCpZvSGP3eKmrXqJSfpk/bumxMPuBTvss2p9GvXT0ALjurAd+sTS7VcgeDC7q3YcaXywGY8eVy+pzbxut9RYSzOzRjzoI1zv4/+LR/IIXKrFp+6492Hi15E0hS1Un+Os6f9fQ9g/nbg1PJys6hcb1avPTQtQw4vy1jJ80gOzuHSpUqMHns1QD8uH4bU2Yu4oUHriEmqhqjb+5H7xsmAnDPLf2JiapW3KFC1rPXdqJmZCVEIGlnBg997Pk/Ymz1Ssy6uweRlSPIVbihR1P6P/UtmUezeX14N8Z9uJrd+48w8b/rmXx9Z0YNaMn6nRlMX1q4RhxK/vHoOyz5cTP7Mg7S9fJHGHVjP/4+tDd/f3gqH32+jHrxMbz62DAAdu/Zz0XDJ5F58AhhYcJb0xfwzTtjqF6tMsPueY0J911FfGwUY28byB2PvMszb3zBGc0TuOrCbgE+S+8EQ/DyhhR1T6nIhCKVVPWo1xmLnAt8B6zlj0lq7lfVOSfbp2Onzrp46XJvD1HunD7qs0AXIeitfGpAoIsQ1Pr26MbqVStPKTzVad5Gh06a4VXaSYNarlTVzkX9JiKVgYVAJTyVremq+rCINMHztlRNYBVwnapmiUgl4B2gE7AHuEpVfyvu+N6M6NtFRNYCm5z1diLyYkn7qeoiVRVVPVNV2zvLSYObMSZ0lFIT9SjQS1XbAe2BfiLSDXgamKyqzYF9wM1O+puBfaraDJjspCu+nF6cywvAQDwRE1Vdg72qZUy5VhoP+qpH3nM1FZxFgV7AdGf7VOAS5/vFzjrO772lhO5cbwJcmKqe+PRnjhf7GWNcSIAIEa8WIFZEVhRYjnsVRETCRWQ1sBtIBLYA6aqa7STZgef5WZzP7QDO7xlALYrhTSfDdhHpAqiIhAP/ALx7GMoY40o+PAGSdrJ7cACqmgO0F5FoYBZQ1CMJeR0FRT5eWdzBvanB3Q78E2gIpOB57ep2L/YzxriQePmali+vaqlqOjAfT3yJFpG8yld9YJfzfQfQwClDBBAF7C0uX2/eRd2tqleraqyzXK2qaV6X3BjjOqVxD05Eajs1N0SkCp7J5ZOAecAVTrJhQN6oF5856zi/f6slPAbizYi+r1NENVBVhxeR3BhTDpTSc3B1ganOra8w4GNVnS0i64EPReQJ4Ec8z9PifL4rIpvx1NyuLukA3tyD+6bA98rApTg3+owx5Y9AqQxmqao/4XlH/cTtvwJdith+BBjsyzFKDHCq+lHBdRF5F09vhzGmPAqS17C88Wde1WoChPbIhcaYUxIqo554cw9uH3/cgwvD0/Yd489CGWOCl2umDXSeEm6HZx4GgNySei2MMe4XKgGu2MdEnGA2S1VznMWCmzEGEfFqCTRvHvT9QUQ6+r0kxpiQ4Jk20Lsl0IqbkyHCed/rXOBWEdkCHMTTBFdVtaBnTDkVDBPKeKO4e3A/AB35401+Y4xxTSeDgGc2+zIqizEmRIRIBa7YAFdbRArPm+cIxmHIjTFlQQhzwXNw4XhmtA+NMzHGlAnBHTW4ZFV9rMxKYowJDQIRIXITrsR7cMYYU5BbanC9y6wUxpiQEvKPiahqsSNlGmPKrxCJb/6b+NkY406Cd69ABQMLcMYY34gLmqjGGFMUz5sMFuCMMS4VGuHNApwx5k8IkQqcBThjjK+CY6w3b1iAM8b4xHpRjTGuZp0Mf5INin5ySx/vF+giBL1G548KdBGC2tENpTClsWBNVGOMO1kT1RjjalaDM8a4VmiENwtwxhgfCRBuNThjjFuFSHyzAGeM8ZUgIdJItQBnjPGZ1eCMMa7keUwkNCKcBThjjG/EanDGGBcLlVe1QuWBZGNMkPAMeOndUmw+Ig1EZJ6IJInIOhG5y9leU0QSRWST8xnjbBcReUFENovITyLSsaSyWoAzxvhMvPxfCbKBu1W1FdANGCEirYExwFxVbQ7MddYB+gPNnWU48GpJB7AAZ4zxmYh3S3FUNVlVVznfDwBJQAJwMTDVSTYVuMT5fjHwjnosBaJFpG5xx7AAZ4zxWSnV4P7IT6Qx0AFYBsSrajJ4giAQ5yRLAAoOh7LD2XZS1slgjPFJ3j04L8WKyIoC66+p6mvH5ScSCcwARqrq/mJe5C/qh2IHWLMAZ4zxjYgvvahpqtr55FlJBTzB7X1VnelsThGRuqqa7DRBdzvbdwANCuxeH9hV3MGtiWqM8Zl4uRSbh6eq9iaQpKqTCvz0GTDM+T4M+LTA9uud3tRuQEZeU/ZkrAZnjPFJKc6L2h24DlgrIqudbfcD44GPReRmYBsw2PltDjAA2AwcAm4s6QAW4IwxPiuN8Kaqi4rJqncR6RUY4csxLMAZY3wXGi8yWIAzxvguVF7VsgBnjPFZaIQ3C3DGmD8jRCKcBThjjE88j4CERoSzAGeM8Y2NB2eMcbMQiW8W4IwxvhKb+NkY414hEt8swBljfOPNe6bBwgKcMcZ3IRLhLMAZY3xmj4kEsU1bU7hl3JT89d927mHs8AHUjYvm6dfnsPG3FBKnjKZDq4ZF7j93yXrGTppBbm4u1w46m5HD+pZV0f1mzIQP+XZpErWiI/nirXsAmDN/DS9M/Yot23Yz85W7aNvCMxTXmqRtPDDpEwBUlTuH/ZW+57UtlOf25D2MfPw90g8c4ozmCTwz9hoqVgjdP7k1nz5K5qGj5OTmkp2dS69hEwC49coe3Hrl+WTn5JK46GceftEzus8ZzeoxaewQqkdWRnOVXsMmcDQr+7g8o2tU5a1/3UTDujXZlryXG8e+ScaBw2V+br4q9/fgRKQysBCo5Bxnuqo+7K/j+aJ5o3gWvOeZxyInJ5c2Ax/gwp7tOHQki6lP38Ld4z886b45ObncO/ETZrw4gnpx0Vxww0T6ndeWlqcVOzR80Lvsr2dx7SXncs/4afnbTm9Sh1cevYEHJk8/Lu3pTeow698jiQgPZ/ee/Qy89Vl6ndOaiPDw49JNeO1zbrzifAb26sCDk6fzyZwfGHrxOWVyPv5y0W3PszfjYP76uZ2aM6BHW84d8hRZx7KJjYkEIDw8jP88NozbHn6HnzftJCaqGseycwrlN2pYHxYu38BzUxMZOawPo4b15ZGXPi2ULqiE0HNw/hzw8ijQS1XbAe2Bfs4gdUFl4fINNK4fS4O6NWnRpA7NG8UXm37V+q00qR9L44RYKlaI4NI+nfhi4doyKq3/dGnXlOgaVY/b1qxRPKc1jCuUtkrlivnB7GjWsSL/2FWVpT9uol+PMwG4tG9nEheH/nU60U2Xn8dzUxPJOuapmaXtywSgV9eWrNu8k5837QRgX8ZBcnMLj67dv8eZTJu9DIBps5cxoOeZZVTyU1PaczL4i99qcM7YTZnOagVnKXb89ECYmbiKy/p28jp98u50EuJj8tfrxUWzct1vfihZcFudtJUxEz5iV8o+nhl7TaHa2779B6keWSV/e53aUaSk7Q9EUUuNqjLzpTtQVd6etZipsxbTrFEcZ7dvygO3X8TRrGM8+Pwsfly/jaaN4lCF6S+MIDYmkplfr+SFd78plGdczeqk7PFcl5Q9+6kdU72sT8tnQujU4Px6Q0REwoGVQDPgZVVd5s/j+SrrWDZffreWB/9+kdf7FBWhQ+Whx9LUvlUjvpxyL5u3pnDv+Gn06NqSShUr5P+uRVyoUL9M/W6ZzO9pGcTGRDLrpTvY9NvvRISHEV29Kn1ufIaOrRsx5V830f6SR4gID6dbu9PoNWwih49k8X+v3MnqX7axcPnGQJ9GqQiV/5R+nZNBVXNUtT2eySG6iEibE9OIyHARWSEiK9LSUv1ZnEK++X49Z7ZoQFytGl7vUy8ump0p+/LXd+1Op05slD+KFxKaNYqnSpWKbPzf78dtrxlVjQOZh8nO8dx3+j01w6frHIx+T8sAPM3Q2fN/ouMZjdm5O53/zlsDeG5f5KpSKzqSXSnpLP5xM3szDnL46DESv19HuxYNCuW5e+8B4p3rEl+rBqn7DpTdCZ2K0piUoQyUyaQzqpoOzAf6FfHba6raWVU7x8bWLovi5Jv59UqfmqcAHVo15NftqWzdlUbWsWxmJa6k//mFexDdbHvynvzAtfP3vfxveyoJdWKOSyMidG3fjC8X/ATArK9XcEH3Qv++hYyqlSsSWbVS/vde3VqStGUXc+b/xPlnnQ5A04ZxVKwQwZ70TOYuXc8ZzRKoUqkC4eFhdO/YjA0n/CMA8OXCtQwZ2BWAIQO78oVzvYJdmDOzVklLoPmzF7U2cExV00WkCnAB8LS/juerQ0eymP/DL0wae3X+ttnz1zDmmensSc9kyKh/0+b0BKa/MILk1AxGPvkBHz13OxER4Tw9ejCD73yFnFzlmou6hXwPKsDIx99l2Zot7Ms4SPcrH+OuG/5KdPWqPPriLPZmZHLL/W/Qqmk93p7wN1as/R//mfYtFSLCEREevesyakZ5eg9vHvM6/xp9JfGxUdw7fCAjH3+XSW99QetmCSMrqI4AAAeHSURBVAzu3zXAZ/nn1a5Vnfcm3ApAeEQ4M75cwdwlSVSICOelh4by/Yf3k3Ush9sfeReAjAOHeeWDb5n7zr2gSuLidXy9eB0Az4+7hikzF7E6aRuTpyYy5ambuHbQ2exI2ccNY94M2Dn6IvChyzuiRd0sKY2MRc4EpgLheGqKH6vqY8Xt07FTZ120ZLlfyuMG+w5mBboIQa9Zr7sDXYSgdnTDx+Qe2n1K8alNu4468+tFXqVtUafayuLmRfU3f/ai/gR08Ff+xpjAsAEvjTHuFUIP+lqAM8b4LETimwU4Y4yvbMBLY4yLhUh8swBnjPFNkDzD6xULcMYY34VIhLMAZ4zxmT0mYoxxLbsHZ4xxJ4EwC3DGGPcKjQhnAc4Y4xMb8NIY42ohEt8swBljfBcqNbgyGfDSGOMuIuLV4kU+b4nIbhH5ucC2miKSKCKbnM8YZ7uIyAsisllEfhKRjiXlbwHOGOOzUhyx/G0Kj/Q9Bpirqs2Buc46QH+gubMMB14tKXMLcMYYn4h4v5REVRcCe0/YfDGewXJxPi8psP0d9VgKRItIscNpW4AzxvjMh3lRY/MmlXKW4V5kH6+qyQDOZ97kvAnA9gLpdjjbTso6GYwxvvO+kyGtFIcsL+qoxc65YDU4Y4zP/DxrYEpe09P53O1s3wEUnHuxPrCruIwswBljfOTdlIGnMG3gZ8Aw5/sw4NMC2693elO7ARl5TdmTsSaqMcYnpfkmg4hMA3riuVe3A3gYGA98LCI3A9uAwU7yOcAAYDNwCLixpPwtwBljAkZVh5zkp95FpFVghC/5W4AzxvgsVN5ksABnjPGZDXhpjHEnmxfVGONWNlySMcbVrIlqjHEtq8EZY1wrROKbBThjzJ8QIhHOApwxxicCp/IaVpkSz8PBwUFEUoGtgS5HAbFAWqALEcTs+pQs2K5RI1WtfSoZiMiXeM7LG2mqeuKAlmUmqAJcsBGRFaU41Ivr2PUpmV2jwLLRRIwxrmUBzhjjWhbgivdaoAsQ5Oz6lMyuUQDZPThjjGtZDc4Y41oW4IwxrmUBrghFzbZt/iAiDURknogkicg6Ebkr0GUKJiJSWUR+EJE1zvV5NNBlKq/sHlwRROR8IBPPJLNtAl2eYOPMdFRXVVeJSHVgJXCJqq4PcNGCgogIUE1VM0WkArAIuMuZrNiUIavBFeEks20bh6omq+oq5/sBIIkSJuAtT5yZ1zOd1QrOYjWJALAAZ06JiDQGOgDLAluS4CIi4SKyGs+cnomqatcnACzAmT9NRCKBGcBIVd0f6PIEE1XNUdX2eCYn7iIidqsjACzAmT/Fubc0A3hfVWcGujzBSlXTgflAwF44L88swBmfOTfR3wSSVHVSoMsTbESktohEO9+rABcAvwS2VOWTBbgiOLNtLwFaiMgOZ4Zt84fuwHVALxFZ7SwDAl2oIFIXmCciPwHL8dyDmx3gMpVL9piIMca1rAZnjHEtC3DGGNeyAGeMcS0LcMYY17IAZ4xxLQtwIUREcpxHMn4WkU9EpOop5NVTRGY73weJyJhi0kaLyN//xDEeEZHR3m4/Ic3bInKFD8dqbKO/mBNZgAsth1W1vTPCSRZwW8EfxcPn/6aq+pmqji8mSTTgc4AzJtAswIWu74BmTs0lSUReAVYBDUSkr4gsEZFVTk0vEkBE+onILyKyCLgsLyMRuUFEXnK+x4vILGcsszUicg4wHmjq1B4nOunuEZHlIvJTwfHORGSciGwQkW+AFiWdhIjc6uSzRkRmnFArvUBEvhORjSIy0EkfLiITCxz7b6d6IY17WYALQSISAfQH1jqbWuAZu64DcBB4ALhAVTsCK4B/ikhl4HXgIuA8oM5Jsn8BWKCq7YCOwDpgDLDFqT3eIyJ9geZAF6A90ElEzheRTsDVeEYXuQw4y4vTmamqZznHSwIKvjXSGOgBXAj82zmHm4EMVT3Lyf9WEWnixXFMORQR6AIYn1RxhuABTw3uTaAesLXAYIrdgNbAYs8ro1TE89pZS+B/qroJQETeA4YXcYxewPXgGREDyBCRmBPS9HWWH531SDwBrzowS1UPOcf4zItzaiMiT+BpBkcCXxX47WNVzQU2icivzjn0Bc4scH8uyjn2Ri+OZcoZC3Ch5bAzBE8+J4gdLLgJz7uPQ05I157SG3RRgKdU9T8nHGPknzjG23hGA14jIjcAPQv8dmJe6hz7H6paMBDmjUtnzHGsieo+S4HuItIMQESqisjpeEazaCIiTZ10Q06y/1zgdmffcBGpARzAUzvL8xVwU4F7ewkiEgcsBC4VkSrOUOYXeVHe6kCyM/zS0BN+GywiYU6ZTwM2OMe+3UmPiJwuItW8OI4ph6wG5zKqmurUhKaJSCVn8wOqulFEhgOfi0gannkCihqE8S7gNWcElRzgdlVdIiKLnccwvnDuw7UCljg1yEzgWmeOho+A1cBWPM3okjyIZzTgrXjuKRYMpBuABUA8cJuqHhGRN/Dcm1vlDNuUClzi3dUx5Y2NJmKMcS1rohpjXMsCnDHGtSzAGWNcywKcMca1LMAZY1zLApwxxrUswBljXOv/AYWsA+edBStkAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_predict = decision_tree_classifier.predict(X_test)\n",
    "cross = cross_val_score(decision_tree_classifier, X_train, y_train, cv=5).mean()\n",
    "print(\"cross val score is:\", cross)\n",
    "\n",
    "class_names = list(set(y))\n",
    "\n",
    "disp = plot_confusion_matrix(decision_tree_classifier, X_test, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                            values_format = '.1f')\n",
    "\n",
    "print(classification_report(y_test, y_predict, digits = 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree_classifier = DecisionTreeClassifier()\n",
    "decision_tree_classifier.fit(X_train, y_train)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
